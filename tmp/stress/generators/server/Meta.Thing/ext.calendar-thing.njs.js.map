{"version":3,"sources":["generators/server/Meta.Thing/ext.calendar-thing.njs.js"],"names":["text","code","expression"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAiBA,IAChBA,IACAC;AAFD,IAECA,AACAA;AAHD,IAGCA,AACAA;AAJD,IAICA,AAAED,IACFA,IACAA,+BAA6BE,oBAAqBF,YAAUE,eAAgBF,QAC5EA,kBAAgBE,oBAAqBF,GAACE,eAAgBF,MACtDA,kDACAA,mBAAiBE,qBAAsBF,cACvCA,aAAWE,qBAAsBF,MACjCA,kCAAgCE,oBAAqBF,GAACE,eAAgBF,KAAGC;AAX1E,IAW0EA,AAAwBD,OAAIE,iBAAkBF,IAACC;AAXzH,IAWyHA,AAAKD,MAC7HA,UAAQE,eAAgBF,MACxBA,eAAaE,oBAAqBF,MAClCA,IACAA,+BACAA,8EAA4EE,oBAAqBF,GAACE,eAAgBF,4DAClHA,+BACAA,iCACAA,8CACAA,yDACAA,8BAA4BE,yCAA0CF,KACtEA,yBAAuBE,sCAAuCF,KAC9DA,mCAAiCE,iDAAkDF,KACnFA,gBACAA,6BACAC;AA1BD,IA0BCA,AACAA;AA3BD,IA2BCA,AACAA;AA5BD,IA4BCA,AACAA;AA7BD,IA6BCA,AACAA;AA9BD,IA8BCA,AACAA;AA/BD,IA+BCA,AAAED,IACFA,aACAA,IACAA,UAAQC;AAlCT,IAkCSA,AAA8BD,IACtCA,oBAAiBE,oEAAqEF,OACtFA,UAAQC;AApCT,IAoCSA,AAAMD,IACdA,IACAA,UAAQC;AAtCT,IAsCSA,AAA0CD,IAClDA,gCAA6BE,kCAAmCF,OAChEA,UAAQC;AAxCT,IAwCSA,AAAMD,IACdA,IACAA,UAAQC;AA1CT,IA0CSA,AAA4BD,IACpCA,kBAAeE,oBAAqBF,OACpCA,UAAQC;AA5CT,IA4CSA,AAAMD,IACdA,IACAA,UAAQC;AA9CT,IA8CSA,AAA8BD,IACtCA,yBAAsBE,sBAAuBF,OAC7CA,UAAQC;AAhDT,IAgDSA,AAAMD,IACdA,IACAA,UAAQC;AAlDT,IAkDSA,AAAmCD,IAC3CA,qDAAmDE,2BAA4BF,QAC/EA,kCACAA,0CACAA,wCACAA,8BACAA,2CACAA,8CAA4CE,8CAA+CF,KAC3FA,mCACAA,6CACAA,0CACAA,2BACAA,wBACAA,kCACAA,qBACAA,gBAAcC;AAjEf,IAiEeA,AAAMD,IACpBA,UAAQC;AAlET,IAkESA,AAAmCD,IAC3CA,yBAAsBE,2BAA4BF,KAAEC;AAnErD,IAmEqDA,AAAMD,IAC1DA,UAAQC;AApET,IAoESA,AAAmCD,IAC3CA,qDAAmDE,2BAA4BF,QAC/EA,kCACAA,0CACAA,wCACAA,8BACAA,2CACAA,8CAA4CE,8CAA+CF,KAC3FA,mCACAA,6CACAA,0CACAA,2BACAA,wBACAA,kCACAA,qBACAA,gBAAcC;AAnFf,IAmFeA,AAAMD,IACpBA,IACAA,UAAQC;AArFT,IAqFSA,AAA2BD,IACnCA,gBAAaE,mBAAoBF,OACjCA,UAAQC;AAvFT,IAuFSA,AAAMD,IACdA,IACAA,UAAQC;AAzFT,IAyFSA,AAA+BD,IACvCA,oBAAiBE,uBAAwBF,OACzCA,UAAQC;AA3FT,IA2FSA,AAAOD,IACfA,IACAA,UAAQC;AA7FT,IA6FSA,AAA0BD,IAClCA,eAAYE,kBAAmBF,OAC/BA,UAAQC;AA/FT,IA+FSA,AAAMD,IACdA,IACAA,kBAAeE,aAAcF,MAC7BA,WACAA,YAAUC;AAnGX,IAmGWA,AAAiCD,IAC3CA,eACAA,YAAUC;AArGX,IAqGWA,AAAMD,IAChBA,UAAQC;AAtGT,IAsGSA,AACRA;AAvGD,IAuGCA,AAAUD,MACVA,IACAA,wDAAsDE,oBAAqBF,GAACE,eAAgBF,QAC5FA,gCACAA,wCACAA,sCACAA,4BACAA,yCACAA,4CAA0CE,oBAAqBA,eAAgBF,KAC/EA,iCACAA,2CACAA,wCACAA,yBACAA,sBACAA,gCACAA,mBACAA,qCAAkCE,oBAAqBA,eAAgBF,OACvEA,8BAA4BE,iCAAkCF,KAC9DA,yBAAuBE,8BAA+BF,KACtDA,mCAAiCE,yCAA0CF,KAC3EA,SACAA,IACAA,uBAAqBC;AA7HtB,IA6HsBA,AAAwCD,IAC7DA,SACAA,mBAAiBE,yCAA0CF,MAC3DA,0BAAwBE,4CAA6CF,KACrEA,SACAA,MAAIC;AAlIL,IAkIKA,AAAaD,IACjBA,aACAA,MAAIC;AApIL,IAoIKA,AAAMD,IACVA,SACAA,IACAA,2BAAyBE,kCAAmCF,MAC5DA,IACAA,gCACAA,0BAAwBE,sCAAuCF,KAC/DA,kBAAgBE,8BAA+BF,IAC/CA,UACAA,IACAA,iCACAA,2BAAyBE,uCAAwCF,KACjEA,mBAAiBE,+BAAgCF,IACjDA,UACAA,IACAA,+BACAA,+BAA6BE,kCAAmCF,KAChEA,qBAAmBE,iCAAkCF,KACrDA,gCAA8BE,4CAA6CF,KAC3EA,uBAAqBE,mCAAoCF,KACzDA,qBAAmBE,iCAAkCF,KACrDA,yBAAuBE,qCAAsCF,KAC7DA,oBAAkBE,gCAAiCF,KACnDA,8BAA4BE,oDAAqDF,IACjFA,cACAA,IACAA,iCACAA,UAAQC;AA/JT,IA+JSA,AACRA;AAhKD,IAgKCA,AACAA;AAjKD,IAiKCA,AACAA;AAlKD,IAkKCA,AAAoCD,IACpCA,aACAA,eAAaE,iBAAkBF,MAC/BA,2CACAA,UAAQE,qBAAsBF,IAC9BA,WACAA,SACAA,MAAIC;AAzKL,IAyKKA,AAA8BD,IAClCA,SACAA,MAAIC;AA3KL,IA2KKA,AAAMD,IACVA,MAAIC;AA5KL,IA4KKA,AAAQD,IACZA,UACAA,QACAA,IACAA,kBACAA,+BACAA,yEAAuEE,oBAAqBF,GAACE,eAAgBF,8BAC7GA,4BACAA,UACAA,oDACAA,8EAA4EE,oBAAqBF,GAACE,eAAgBF,uDAClHA,UACAA,uDACAA,qFAAmFE,oBAAqBF,GAACE,eAAgBF,uDACzHA,UACAA,wDACAA,4EAA0EE,oBAAqBF,GAACE,eAAgBF,0DAChHA,SACAA,QACAA,IACAA,iCACAA,sBACAA,+EAA6EE,oBAAqBF,GAACE,eAAgBF,4BACnHA,sBACAA,4BAA0BE,qBAAsBF,WAChDA,IACAA,yBACAA,sFACAA,uDACAA,YACAA,WACAA,IACAA,mfile":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":48,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":49,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":50,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":51,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":52,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":53,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":54,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":55,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":56,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":57,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":58,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":59,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":60,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":61,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":62,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":63,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":64,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":65,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":66,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":67,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":68,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":69,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":70,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":71,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":72,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":73,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":74,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":75,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":76,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":77,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":78,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":79,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":80,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":81,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":82,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":83,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":84,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":85,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":86,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":87,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":88,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":89,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":90,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":91,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":92,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":93,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":94,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":95,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":96,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":97,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":98,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":99,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":100,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":101,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":102,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":103,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":104,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":105,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":106,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":107,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":108,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":109,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":110,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":111,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":112,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":113,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":114,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":115,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":116,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":117,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":118,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":119,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":120,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":121,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":122,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":123,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":124,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":125,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":126,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":127,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":128,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":129,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":130,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":131,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":132,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":133,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":134,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":135,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":136,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":137,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":138,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":139,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":140,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":141,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":142,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":143,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":144,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":145,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":146,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":147,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":148,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":149,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":150,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":151,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":152,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":153,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":154,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":155,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":156,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":157,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":158,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":159,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":160,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":161,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":162,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":163,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":164,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":165,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":166,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":167,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":168,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":169,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":170,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":171,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":172,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":173,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":174,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":175,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":176,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":177,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":178,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":179,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":180,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":181,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":182,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":183,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":184,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":185,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":186,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":187,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":188,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":189,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":190,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":191,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":192,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":193,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":194,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":195,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":196,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":197,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":198,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":199,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":200,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":201,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":202,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":203,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":204,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":205,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":206,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":207,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":208,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":209,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":210,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":211,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":212,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":213,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":214,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":215,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":216,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":217,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":218,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":219,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":220,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":221,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":222,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":223,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":224,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":225,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":226,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":227,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":228,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":229,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":230,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":231,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":232,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":233,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":234,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":235,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":236,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":237,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":238,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":239,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":240,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":241,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":242,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":243,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":244,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":245,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":246,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":247,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":248,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":249,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":250,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":251,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":252,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":253,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":254,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":255,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":256,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":257,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":258,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":259,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":260,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":261,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":262,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":263,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":264,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":265,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":266,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":267,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":268,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":269,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":270,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":271,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":272,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":273,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":274,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":275,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":276,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":277,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":278,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":279,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":280,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":281,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":282,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":283,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":284,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":285,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":286,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":287,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":288,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":289,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js"},{"generatedLine":8,"generatedColumn":4,"originalLine":1,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":8,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":12,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":9,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":9,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":10,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":10,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":4,"originalLine":5,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":8,"originalLine":6,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":12,"originalLine":7,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":43,"originalLine":7,"originalColumn":30,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":63,"originalLine":7,"originalColumn":51,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":75,"originalLine":7,"originalColumn":61,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":90,"originalLine":7,"originalColumn":77,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":98,"originalLine":8,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":116,"originalLine":8,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":136,"originalLine":8,"originalColumn":38,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":139,"originalLine":8,"originalColumn":39,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":154,"originalLine":8,"originalColumn":55,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":160,"originalLine":9,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":210,"originalLine":10,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":229,"originalLine":10,"originalColumn":18,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":250,"originalLine":10,"originalColumn":40,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":264,"originalLine":11,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":277,"originalLine":11,"originalColumn":12,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":298,"originalLine":11,"originalColumn":34,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":304,"originalLine":12,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":338,"originalLine":12,"originalColumn":33,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":358,"originalLine":12,"originalColumn":54,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":361,"originalLine":12,"originalColumn":55,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":376,"originalLine":12,"originalColumn":71,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":381,"originalLine":12,"originalColumn":74,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":4,"originalLine":12,"originalColumn":74,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":4,"originalLine":12,"originalColumn":98,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":11,"originalLine":12,"originalColumn":102,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":28,"originalLine":12,"originalColumn":120,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":32,"originalLine":12,"originalColumn":121,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":4,"originalLine":12,"originalColumn":121,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":4,"originalLine":12,"originalColumn":126,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":10,"originalLine":13,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":20,"originalLine":13,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":35,"originalLine":13,"originalColumn":25,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":41,"originalLine":14,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":56,"originalLine":14,"originalColumn":14,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":76,"originalLine":14,"originalColumn":35,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":82,"originalLine":15,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":86,"originalLine":16,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":117,"originalLine":17,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":195,"originalLine":17,"originalColumn":77,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":215,"originalLine":17,"originalColumn":98,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":218,"originalLine":17,"originalColumn":99,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":233,"originalLine":17,"originalColumn":115,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":293,"originalLine":18,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":324,"originalLine":19,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":357,"originalLine":20,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":403,"originalLine":21,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":460,"originalLine":22,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":490,"originalLine":22,"originalColumn":29,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":531,"originalLine":22,"originalColumn":71,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":536,"originalLine":23,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":561,"originalLine":23,"originalColumn":24,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":599,"originalLine":23,"originalColumn":63,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":604,"originalLine":24,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":639,"originalLine":24,"originalColumn":34,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":688,"originalLine":24,"originalColumn":84,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":693,"originalLine":25,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":709,"originalLine":26,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":738,"originalLine":27,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":4,"originalLine":27,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":4,"originalLine":28,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":4,"originalLine":28,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":4,"originalLine":29,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":16,"generatedColumn":4,"originalLine":29,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":16,"generatedColumn":4,"originalLine":30,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":17,"generatedColumn":4,"originalLine":30,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":17,"generatedColumn":4,"originalLine":31,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":18,"generatedColumn":4,"originalLine":31,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":18,"generatedColumn":4,"originalLine":32,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":4,"originalLine":32,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":4,"originalLine":32,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":8,"originalLine":33,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":21,"originalLine":34,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":25,"originalLine":35,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":35,"originalLine":35,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":4,"originalLine":35,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":4,"originalLine":35,"originalColumn":39,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":8,"originalLine":36,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":28,"originalLine":36,"originalColumn":18,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":96,"originalLine":36,"originalColumn":87,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":103,"originalLine":37,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":113,"originalLine":37,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4,"originalLine":37,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4,"originalLine":37,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":8,"originalLine":38,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":12,"originalLine":39,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":22,"originalLine":39,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":22,"generatedColumn":4,"originalLine":39,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":22,"generatedColumn":4,"originalLine":39,"originalColumn":51,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":22,"generatedColumn":8,"originalLine":40,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":22,"generatedColumn":40,"originalLine":40,"originalColumn":30,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":22,"generatedColumn":74,"originalLine":40,"originalColumn":65,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":22,"generatedColumn":81,"originalLine":41,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":22,"generatedColumn":91,"originalLine":41,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":23,"generatedColumn":4,"originalLine":41,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":23,"generatedColumn":4,"originalLine":41,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":23,"generatedColumn":8,"originalLine":42,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":23,"generatedColumn":12,"originalLine":43,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":23,"generatedColumn":22,"originalLine":43,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":24,"generatedColumn":4,"originalLine":43,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":24,"generatedColumn":4,"originalLine":43,"originalColumn":37,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":24,"generatedColumn":8,"originalLine":44,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":24,"generatedColumn":26,"originalLine":44,"originalColumn":16,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":24,"generatedColumn":46,"originalLine":44,"originalColumn":37,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":24,"generatedColumn":53,"originalLine":45,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":24,"generatedColumn":63,"originalLine":45,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":25,"generatedColumn":4,"originalLine":45,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":25,"generatedColumn":4,"originalLine":45,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":25,"generatedColumn":8,"originalLine":46,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":25,"generatedColumn":12,"originalLine":47,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":25,"generatedColumn":22,"originalLine":47,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":26,"generatedColumn":4,"originalLine":47,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":26,"generatedColumn":4,"originalLine":47,"originalColumn":39,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":26,"generatedColumn":8,"originalLine":48,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":26,"generatedColumn":33,"originalLine":48,"originalColumn":23,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":26,"generatedColumn":55,"originalLine":48,"originalColumn":46,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":26,"generatedColumn":62,"originalLine":49,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":26,"generatedColumn":72,"originalLine":49,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":27,"generatedColumn":4,"originalLine":49,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":27,"generatedColumn":4,"originalLine":49,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":27,"generatedColumn":8,"originalLine":50,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":27,"generatedColumn":12,"originalLine":51,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":27,"generatedColumn":22,"originalLine":51,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":28,"generatedColumn":4,"originalLine":51,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":28,"generatedColumn":4,"originalLine":51,"originalColumn":44,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":28,"generatedColumn":8,"originalLine":52,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":28,"generatedColumn":61,"originalLine":52,"originalColumn":52,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":28,"generatedColumn":88,"originalLine":52,"originalColumn":80,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":28,"generatedColumn":96,"originalLine":53,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":28,"generatedColumn":130,"originalLine":54,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":28,"generatedColumn":172,"originalLine":55,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":28,"generatedColumn":212,"originalLine":56,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":28,"generatedColumn":242,"originalLine":57,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":28,"generatedColumn":285,"originalLine":58,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":28,"generatedColumn":331,"originalLine":58,"originalColumn":45,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":28,"generatedColumn":377,"originalLine":58,"originalColumn":92,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":28,"generatedColumn":382,"originalLine":59,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":28,"generatedColumn":417,"originalLine":60,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":28,"generatedColumn":462,"originalLine":61,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":28,"generatedColumn":504,"originalLine":62,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":28,"generatedColumn":531,"originalLine":63,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":28,"generatedColumn":555,"originalLine":64,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":28,"generatedColumn":589,"originalLine":65,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":28,"generatedColumn":610,"originalLine":66,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":28,"generatedColumn":626,"originalLine":66,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":4,"originalLine":66,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":4,"originalLine":66,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":8,"originalLine":67,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":18,"originalLine":67,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":30,"generatedColumn":4,"originalLine":67,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":30,"generatedColumn":4,"originalLine":67,"originalColumn":44,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":30,"generatedColumn":8,"originalLine":68,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":30,"generatedColumn":33,"originalLine":68,"originalColumn":23,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":30,"generatedColumn":60,"originalLine":68,"originalColumn":51,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":30,"generatedColumn":65,"originalLine":68,"originalColumn":53,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":31,"generatedColumn":4,"originalLine":68,"originalColumn":53,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":31,"generatedColumn":4,"originalLine":68,"originalColumn":59,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":31,"generatedColumn":8,"originalLine":69,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":31,"generatedColumn":18,"originalLine":69,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":4,"originalLine":69,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":4,"originalLine":69,"originalColumn":44,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":8,"originalLine":70,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":61,"originalLine":70,"originalColumn":52,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":88,"originalLine":70,"originalColumn":80,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":96,"originalLine":71,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":130,"originalLine":72,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":172,"originalLine":73,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":212,"originalLine":74,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":242,"originalLine":75,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":285,"originalLine":76,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":331,"originalLine":76,"originalColumn":45,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":377,"originalLine":76,"originalColumn":92,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":382,"originalLine":77,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":417,"originalLine":78,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":462,"originalLine":79,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":504,"originalLine":80,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":531,"originalLine":81,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":555,"originalLine":82,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":589,"originalLine":83,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":610,"originalLine":84,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":626,"originalLine":84,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":33,"generatedColumn":4,"originalLine":84,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":33,"generatedColumn":4,"originalLine":84,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":33,"generatedColumn":8,"originalLine":85,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":33,"generatedColumn":12,"originalLine":86,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":33,"generatedColumn":22,"originalLine":86,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":34,"generatedColumn":4,"originalLine":86,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":34,"generatedColumn":4,"originalLine":86,"originalColumn":36,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":34,"generatedColumn":8,"originalLine":87,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":34,"generatedColumn":24,"originalLine":87,"originalColumn":14,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":34,"generatedColumn":43,"originalLine":87,"originalColumn":34,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":34,"generatedColumn":50,"originalLine":88,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":34,"generatedColumn":60,"originalLine":88,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":35,"generatedColumn":4,"originalLine":88,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":35,"generatedColumn":4,"originalLine":88,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":35,"generatedColumn":8,"originalLine":89,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":35,"generatedColumn":12,"originalLine":90,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":35,"generatedColumn":22,"originalLine":90,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":36,"generatedColumn":4,"originalLine":90,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":36,"generatedColumn":4,"originalLine":90,"originalColumn":40,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":36,"generatedColumn":8,"originalLine":91,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":36,"generatedColumn":28,"originalLine":91,"originalColumn":18,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":36,"generatedColumn":51,"originalLine":91,"originalColumn":42,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":36,"generatedColumn":58,"originalLine":92,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":36,"generatedColumn":68,"originalLine":92,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":37,"generatedColumn":4,"originalLine":92,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":37,"generatedColumn":4,"originalLine":92,"originalColumn":16,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":37,"generatedColumn":8,"originalLine":93,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":37,"generatedColumn":12,"originalLine":94,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":37,"generatedColumn":22,"originalLine":94,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":38,"generatedColumn":4,"originalLine":94,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":38,"generatedColumn":4,"originalLine":94,"originalColumn":35,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":38,"generatedColumn":8,"originalLine":95,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":38,"generatedColumn":23,"originalLine":95,"originalColumn":13,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":38,"generatedColumn":41,"originalLine":95,"originalColumn":32,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":38,"generatedColumn":48,"originalLine":96,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":38,"generatedColumn":58,"originalLine":96,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":39,"generatedColumn":4,"originalLine":96,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":39,"generatedColumn":4,"originalLine":96,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":39,"generatedColumn":8,"originalLine":97,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":39,"generatedColumn":12,"originalLine":98,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":39,"generatedColumn":30,"originalLine":98,"originalColumn":16,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":39,"generatedColumn":43,"originalLine":98,"originalColumn":30,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":39,"generatedColumn":49,"originalLine":99,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":39,"generatedColumn":60,"originalLine":100,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":39,"generatedColumn":72,"originalLine":100,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":40,"generatedColumn":4,"originalLine":100,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":40,"generatedColumn":4,"originalLine":100,"originalColumn":44,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":40,"generatedColumn":8,"originalLine":101,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":40,"generatedColumn":23,"originalLine":102,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":40,"generatedColumn":35,"originalLine":102,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":41,"generatedColumn":4,"originalLine":102,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":41,"generatedColumn":4,"originalLine":102,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":41,"generatedColumn":8,"originalLine":103,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":41,"generatedColumn":18,"originalLine":103,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":42,"generatedColumn":4,"originalLine":103,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":42,"generatedColumn":4,"originalLine":104,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":4,"originalLine":104,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":4,"originalLine":104,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":10,"originalLine":105,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":14,"originalLine":106,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":70,"originalLine":106,"originalColumn":55,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":90,"originalLine":106,"originalColumn":76,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":93,"originalLine":106,"originalColumn":77,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":108,"originalLine":106,"originalColumn":93,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":116,"originalLine":107,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":148,"originalLine":108,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":188,"originalLine":109,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":226,"originalLine":110,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":254,"originalLine":111,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":295,"originalLine":112,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":339,"originalLine":112,"originalColumn":43,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":359,"originalLine":112,"originalColumn":64,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":374,"originalLine":112,"originalColumn":80,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":379,"originalLine":113,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":412,"originalLine":114,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":455,"originalLine":115,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":495,"originalLine":116,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":520,"originalLine":117,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":542,"originalLine":118,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":574,"originalLine":119,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":593,"originalLine":120,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":630,"originalLine":120,"originalColumn":35,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":650,"originalLine":120,"originalColumn":56,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":665,"originalLine":120,"originalColumn":72,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":672,"originalLine":121,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":702,"originalLine":121,"originalColumn":29,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":735,"originalLine":121,"originalColumn":63,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":740,"originalLine":122,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":765,"originalLine":122,"originalColumn":24,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":795,"originalLine":122,"originalColumn":55,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":800,"originalLine":123,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":835,"originalLine":123,"originalColumn":34,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":876,"originalLine":123,"originalColumn":76,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":881,"originalLine":124,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":890,"originalLine":125,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":894,"originalLine":126,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":917,"originalLine":126,"originalColumn":22,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":44,"generatedColumn":4,"originalLine":126,"originalColumn":22,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":44,"generatedColumn":4,"originalLine":126,"originalColumn":62,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":44,"generatedColumn":8,"originalLine":127,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":44,"generatedColumn":17,"originalLine":128,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":44,"generatedColumn":36,"originalLine":128,"originalColumn":18,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":44,"generatedColumn":77,"originalLine":128,"originalColumn":60,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":44,"generatedColumn":83,"originalLine":129,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":44,"generatedColumn":109,"originalLine":129,"originalColumn":25,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":44,"generatedColumn":153,"originalLine":129,"originalColumn":70,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":44,"generatedColumn":158,"originalLine":130,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":44,"generatedColumn":167,"originalLine":131,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":44,"generatedColumn":173,"originalLine":131,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":45,"generatedColumn":4,"originalLine":131,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":45,"generatedColumn":4,"originalLine":131,"originalColumn":18,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":45,"generatedColumn":8,"originalLine":132,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":45,"generatedColumn":21,"originalLine":133,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":45,"generatedColumn":27,"originalLine":133,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":4,"originalLine":133,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":4,"originalLine":133,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":8,"originalLine":134,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":17,"originalLine":135,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":21,"originalLine":136,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":48,"originalLine":136,"originalColumn":26,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":82,"originalLine":136,"originalColumn":61,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":88,"originalLine":137,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":92,"originalLine":138,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":124,"originalLine":139,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":150,"originalLine":139,"originalColumn":25,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":188,"originalLine":139,"originalColumn":64,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":193,"originalLine":140,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":211,"originalLine":140,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":241,"originalLine":140,"originalColumn":48,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":245,"originalLine":141,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":255,"originalLine":142,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":259,"originalLine":143,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":292,"originalLine":144,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":319,"originalLine":144,"originalColumn":26,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":358,"originalLine":144,"originalColumn":66,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":363,"originalLine":145,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":382,"originalLine":145,"originalColumn":18,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":413,"originalLine":145,"originalColumn":50,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":417,"originalLine":146,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":427,"originalLine":147,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":431,"originalLine":148,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":462,"originalLine":149,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":493,"originalLine":149,"originalColumn":30,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":527,"originalLine":149,"originalColumn":65,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":532,"originalLine":150,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":553,"originalLine":150,"originalColumn":20,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":586,"originalLine":150,"originalColumn":54,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":591,"originalLine":151,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":623,"originalLine":151,"originalColumn":31,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":667,"originalLine":151,"originalColumn":76,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":672,"originalLine":152,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":695,"originalLine":152,"originalColumn":22,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":730,"originalLine":152,"originalColumn":58,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":735,"originalLine":153,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":756,"originalLine":153,"originalColumn":20,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":789,"originalLine":153,"originalColumn":54,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":794,"originalLine":154,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":819,"originalLine":154,"originalColumn":24,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":856,"originalLine":154,"originalColumn":62,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":861,"originalLine":155,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":881,"originalLine":155,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":913,"originalLine":155,"originalColumn":52,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":918,"originalLine":156,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":948,"originalLine":156,"originalColumn":29,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":1000,"originalLine":156,"originalColumn":82,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":1004,"originalLine":157,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":1018,"originalLine":158,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":1022,"originalLine":159,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":1055,"originalLine":160,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":1065,"originalLine":160,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":47,"generatedColumn":4,"originalLine":160,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":47,"generatedColumn":4,"originalLine":161,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":48,"generatedColumn":4,"originalLine":161,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":48,"generatedColumn":4,"originalLine":162,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":49,"generatedColumn":4,"originalLine":162,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":49,"generatedColumn":4,"originalLine":163,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":50,"generatedColumn":4,"originalLine":163,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":50,"generatedColumn":4,"originalLine":163,"originalColumn":37,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":50,"generatedColumn":8,"originalLine":164,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":50,"generatedColumn":21,"originalLine":165,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":50,"generatedColumn":36,"originalLine":165,"originalColumn":14,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":50,"generatedColumn":53,"originalLine":165,"originalColumn":32,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":50,"generatedColumn":59,"originalLine":166,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":50,"generatedColumn":102,"originalLine":167,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":50,"generatedColumn":112,"originalLine":167,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":50,"generatedColumn":133,"originalLine":167,"originalColumn":31,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":50,"generatedColumn":137,"originalLine":168,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":50,"generatedColumn":148,"originalLine":169,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":50,"generatedColumn":157,"originalLine":170,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":50,"generatedColumn":163,"originalLine":170,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":51,"generatedColumn":4,"originalLine":170,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":51,"generatedColumn":4,"originalLine":170,"originalColumn":35,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":51,"generatedColumn":8,"originalLine":171,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":51,"generatedColumn":17,"originalLine":172,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":51,"generatedColumn":23,"originalLine":172,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":52,"generatedColumn":4,"originalLine":172,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":52,"generatedColumn":4,"originalLine":172,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":52,"generatedColumn":8,"originalLine":173,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":52,"generatedColumn":14,"originalLine":173,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":4,"originalLine":173,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"code","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":4,"originalLine":173,"originalColumn":13,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":8,"originalLine":174,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":18,"originalLine":175,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":26,"originalLine":176,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":30,"originalLine":177,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":48,"originalLine":178,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":79,"originalLine":179,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":152,"originalLine":179,"originalColumn":72,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":172,"originalLine":179,"originalColumn":93,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":175,"originalLine":179,"originalColumn":94,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":190,"originalLine":179,"originalColumn":110,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":220,"originalLine":180,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":248,"originalLine":181,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":258,"originalLine":182,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":310,"originalLine":183,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":388,"originalLine":183,"originalColumn":77,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":408,"originalLine":183,"originalColumn":98,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":411,"originalLine":183,"originalColumn":99,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":426,"originalLine":183,"originalColumn":115,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":481,"originalLine":184,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":491,"originalLine":185,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":546,"originalLine":186,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":631,"originalLine":186,"originalColumn":84,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":651,"originalLine":186,"originalColumn":105,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":654,"originalLine":186,"originalColumn":106,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":669,"originalLine":186,"originalColumn":122,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":724,"originalLine":187,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":734,"originalLine":188,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":790,"originalLine":189,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":866,"originalLine":189,"originalColumn":75,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":886,"originalLine":189,"originalColumn":96,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":889,"originalLine":189,"originalColumn":97,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":904,"originalLine":189,"originalColumn":113,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":962,"originalLine":190,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":971,"originalLine":191,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":979,"originalLine":192,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":983,"originalLine":193,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":1016,"originalLine":194,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":1038,"originalLine":195,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":1117,"originalLine":195,"originalColumn":78,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":1137,"originalLine":195,"originalColumn":99,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":1140,"originalLine":195,"originalColumn":100,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":1155,"originalLine":195,"originalColumn":116,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":1183,"originalLine":196,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":1205,"originalLine":197,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":1233,"originalLine":197,"originalColumn":27,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"expression","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":1254,"originalLine":197,"originalColumn":49,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":1265,"originalLine":198,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":1269,"originalLine":199,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":1294,"originalLine":200,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":1380,"originalLine":201,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":1435,"originalLine":202,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":1447,"originalLine":203,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":1458,"originalLine":204,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":1462,"originalLine":205,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":1497,"originalLine":206,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":1504,"originalLine":207,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.calendar-thing.njs.js","name":"text","content":"<#@ noContent #>\n\n<#\n  const config = context.getThingConfig(context)\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Calendar.#{context.$name}', {\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  extend: 'Modeleditor.view.base.extCalendar',\n  alias: 'widget.#{context.$widgetName}calendar',\n  widget: '#{context.$widgetName}',\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  name:'#{context.$name}',\n  namespace:'#{context.$namespace}',\n\n  fnLoad : function(view) {\n    DirectCacheLogger.userStories('Calendar Load Function', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, embedded: !!view.embeddedKey });\n    if (view.embeddedKey) {\n      view.record = this.rec;\n      view.embeddedKey = this.embeddedKey;\n      view.eventStore = view.rec[this.embeddedKey]();\n      view.allowCreateNew = #{context.cal_mapping.allowCreateEmbedded};\n      view.readOnly =  #{context.cal_mapping.readOnlyEmbedded};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanelEmbedded};\n    } else {\n      view.sortPanels = [\n<#-\n      let spAll = context.cal_mapping.cal_sortBy;\n      if (spAll){\n        let sortPanels = spAll.filter(function(item){return !item.disable;})\n        for (let k = 0; k < sortPanels.length; k++){\n#>\n        {\n\n        <#-if(sortPanels[k].fields){#>\n        fields: \"#{[sortPanels[k].fields.match(/[A-Za-z0-9]*[A-Za-z0-9]/g)].join(',')}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].filterDisplayField){#>\n        filterDisplayField: \"#{sortPanels[k].filterDisplayField}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].name){#>\n        name: \"#{sortPanels[k].name}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortBy){#>\n        sortByQuery: \"#{sortPanels[k].sortBy}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].sortByStore){#>\n        sortByStore: Ext.create('Modeleditor.store.#{sortPanels[k].sortByStore}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].sortByStore.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        thingFilter: \"#{sortPanels[k].thingFilter}\",<#-}#>\n        <#-if(sortPanels[k].thingFilter){#>\n        filterStore: Ext.create('Modeleditor.store.#{sortPanels[k].thingFilter}', {\n                  extKeys: [],\n                  remoteFilter: false,\n                  remoteSort: false,\n                  proxy: {\n                      type: \"direct\",\n                      directFn: ReadByQuery.#{sortPanels[k].thingFilter.replace(/\\./g, \"\")},\n                      reader: {\n                          type: 'jsonmn',\n                          root: 'data'\n                      }\n                  },\n                  pageSize: -1\n              }),\n              <#-}#>\n\n        <#-if(sortPanels[k].key){#>\n        key:\"#{sortPanels[k].key}\",\n        <#-}#>\n\n        <#-if(sortPanels[k].fromKey){#>\n        fromKey:\"#{sortPanels[k].fromKey}\",\n        <#- }#>\n\n        <#-if(sortPanels[k].id){#>\n        id:\"#{sortPanels[k].id}\",\n        <#-}#>\n\n        pUid:\"_#{'PFCAL00'+k}\"\n      }\n          <#-if (k!=sortPanels.length-1){#>\n          ,\n          <#-}#>\n        <#-}\n      }-#>];\n\n      view.eventStore = Ext.create('Modeleditor.store.#{context.$namespace}.#{context.$name}', {\n                extKeys: [],\n                remoteFilter: false,\n                remoteSort: false,\n                proxy: {\n                    type: \"direct\",\n                    directFn: ReadByQuery.#{context.$namespace}#{context.$name},\n                    reader: {\n                        type: 'jsonmn',\n                        root: 'data'\n                    }\n                },\n                pageSize: -1\n            });\n            view.defaultReadFn = \"#{context.$namespace}#{context.$name}\";\n      view.allowCreateNew = #{context.cal_mapping.allowCreate};\n      view.readOnly =  #{context.cal_mapping.readOnly};\n      view.showUnassignedPanel = #{context.cal_mapping.showUnassignedPanel};\n    }\n\n    view.filterCfg = <#-if(context.cal_mapping.cal_filter){#>\n    {\n      queryName:'#{context.cal_mapping.cal_filter.queryRef}',\n      props: function(){#{context.cal_mapping.cal_filter.filterProps}}\n    }\n    <#-} else {#>\n    false\n    <#-}#>\n    ;\n\n    view.jumpToFormat = '#{context.cal_mapping.jumpToFormat}';\n\n    view.multiDayViewCfg = {\n      showMultiDayView: #{context.cal_mapping.showMultiDayView},\n      dayCount: #{context.cal_mapping.dayCount}\n    };\n\n    view.multiWeekViewCfg = {\n      showMultiWeekView: #{context.cal_mapping.showMultiWeekView},\n      weekCount: #{context.cal_mapping.weekCount}\n    };\n\n        view.viewConfig = {\n          enableEventResize: #{context.cal_mapping.enableResize},\n      ddIncrement: #{context.cal_mapping.ddIncrement},\n      minEventDisplayMinutes: #{context.cal_mapping.minEventDisplayMinutes},\n      viewStartHour: #{context.cal_mapping.viewStartHour},\n      viewEndHour: #{context.cal_mapping.viewEndHour},\n      scrollStartHour: #{context.cal_mapping.scrollStartHour},\n      hourHeight: #{context.cal_mapping.hourHeight},\n            contextMenuCfg: #{JSON.stringify(context.cal_mapping.contextMenuCfg)}\n        };\n\n        view.colorSchemes = [\n        <#-\n        let schemes = context.cal_mapping.cal_colorScheme;\n        if (schemes){ for (let k = 0; k < schemes.length; k++){\n          if(!schemes[k].disable){#>\n        {\n      name: '#{schemes[k].name}',\n      func: function(record, callback){\n        #{schemes[k].function}\n      }\n    }\n    <#-if (k!=schemes.length-1){#>\n    ,\n    <#-}#>\n    <#-}}}#>\n    ];\n  },\n\n  listeners: {\n    render: function(view){\n      DirectCacheLogger.userStories('Calendar Render', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id });\n      view.fnLoad(view);\n    },\n    eventclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    eventdblclick: function(view, record, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Event Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, eventId: record.getId() });\n    },\n    dayclick: function(view, date, allDay, htmlEl) {\n      DirectCacheLogger.userStories('Calendar Day Click', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: view.id, date: date, allDay: allDay });\n    }\n  },\n\n  initComponent: function() {\n    let me = this;\n    DirectCacheLogger.userStories('Calendar Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', calendarId: me.id });\n    me.fnLoad(me);\n    me.grid = Ext.widget('#{context.$widgetName}list');\n\n    Ext.apply(this, {\n      calendarStore: Ext.create('PF_Calendar.calendar.data.MemoryCalendarStore', {\n        data: PF_Calendar.calendar.data.EventColors\n      })\n    });\n\n    this.callParent(arguments);\n  }\n});"}]}}