{"version":3,"sources":["generators/server/Meta.Thing/ext.store.catalog.njs.js"],"names":["text","code","expression"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAiBA,IAChBC;AADD,IACCA,AACAA;AAFD,IAECA,AACAA;AAHD,IAGCA,AACAA;AAJD,IAICA,AACAA;AALD,IAKCA,AACAA;AAND,IAMCA,AACAA;AAPD,IAOCA,AACAA;AARD,IAQCA,AACAA;AATD,IASCA,AACAA;AAVD,IAUCA,AACAA;AAXD,IAWCA,AAAED,IACFA,gCAA8BE,YAAaF,WAASE,MAAOF,QAC3DA,kBAAgBE,yBAA0BF,MAC1CA,iCAA+BE,YAAaF,WAASE,MAAOF,OAC5DA,qCACAA,8BAA4BE,YAAaF,WAASE,MAAOF,MACzDA,gBAAcE,qBAAsBF,KACpCA,qBACAA,mBAAiBC;AAnBlB,IAmBkBA,AAAqDD,IACtEA,wBACAA,sBACAA,cAAYE,yBAA0BF,GAACC;AAtBxC,IAsBwCA,AAAYD,IACnDA,yBACAA,uBACAA,mBACAA,IAAEC;AA1BH,IA0BGA,AAAOD,eAAaC;AA1BvB,IA0BuBA,AACtBA;AA3BD,IA2BCA,AAAgED,IAChEA,cAAYC;AA5Bb,IA4BaA,AACZA;AA7BD,IA6BCA,AACAA;AA9BD,IA8BCA,AACAA;AA/BD,IA+BCA,AACAA;AAhCD,IAgCCA,AAAgBD,IAAEC;AAhCnB,IAgCmBA,AAClBA;AAjCD,IAiCCA,AAAID,KACJA,gBAAcE,iBAAkBF,MAChCA,iBAAeE,kBAAmBF,KAClCA,KAAGC;AApCJ,IAoCIA,AAAKD,IACRA,OACAA,IAAEC;AAtCH,IAsCGA,AAAOD,IACTA;AAvCD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","file":"generators/server/Meta.Thing/ext.store.catalog.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":48,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":49,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":50,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":51,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":52,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":53,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":54,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":55,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":56,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":57,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":58,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":59,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":60,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":61,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":62,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":63,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":64,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":65,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":66,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":67,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":68,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":69,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":70,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":71,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":72,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":73,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js"},{"generatedLine":8,"generatedColumn":4,"originalLine":1,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":8,"generatedColumn":8,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":9,"generatedColumn":4,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":9,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":10,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":10,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":11,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":11,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":12,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":12,"generatedColumn":4,"originalLine":6,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":13,"generatedColumn":4,"originalLine":6,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":13,"generatedColumn":4,"originalLine":7,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":14,"generatedColumn":4,"originalLine":7,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":14,"generatedColumn":4,"originalLine":8,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":15,"generatedColumn":4,"originalLine":8,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":15,"generatedColumn":4,"originalLine":9,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":16,"generatedColumn":4,"originalLine":9,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":16,"generatedColumn":4,"originalLine":10,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":17,"generatedColumn":4,"originalLine":10,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":17,"generatedColumn":4,"originalLine":11,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":18,"generatedColumn":4,"originalLine":11,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":18,"generatedColumn":4,"originalLine":12,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":19,"generatedColumn":4,"originalLine":12,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":19,"generatedColumn":4,"originalLine":12,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":19,"generatedColumn":8,"originalLine":13,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":19,"generatedColumn":40,"originalLine":13,"originalColumn":31,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":19,"generatedColumn":52,"originalLine":13,"originalColumn":44,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":19,"generatedColumn":63,"originalLine":13,"originalColumn":53,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":19,"generatedColumn":69,"originalLine":13,"originalColumn":60,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":19,"generatedColumn":77,"originalLine":14,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":19,"generatedColumn":95,"originalLine":14,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":19,"generatedColumn":120,"originalLine":14,"originalColumn":43,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":19,"generatedColumn":126,"originalLine":15,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":19,"generatedColumn":159,"originalLine":15,"originalColumn":32,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":19,"generatedColumn":171,"originalLine":15,"originalColumn":45,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":19,"generatedColumn":182,"originalLine":15,"originalColumn":54,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":19,"generatedColumn":188,"originalLine":15,"originalColumn":61,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":19,"generatedColumn":195,"originalLine":16,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":19,"generatedColumn":232,"originalLine":17,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":19,"generatedColumn":262,"originalLine":17,"originalColumn":29,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":19,"generatedColumn":274,"originalLine":17,"originalColumn":42,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":19,"generatedColumn":285,"originalLine":17,"originalColumn":51,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":19,"generatedColumn":291,"originalLine":17,"originalColumn":58,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":19,"generatedColumn":297,"originalLine":18,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":19,"generatedColumn":313,"originalLine":18,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":19,"generatedColumn":334,"originalLine":18,"originalColumn":37,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":19,"generatedColumn":339,"originalLine":19,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":19,"generatedColumn":360,"originalLine":20,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":19,"generatedColumn":379,"originalLine":20,"originalColumn":18,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":20,"generatedColumn":4,"originalLine":20,"originalColumn":18,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":20,"generatedColumn":4,"originalLine":20,"originalColumn":71,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":20,"generatedColumn":8,"originalLine":21,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":20,"generatedColumn":32,"originalLine":22,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":20,"generatedColumn":54,"originalLine":23,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":20,"generatedColumn":68,"originalLine":23,"originalColumn":13,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":20,"generatedColumn":93,"originalLine":23,"originalColumn":39,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":20,"generatedColumn":96,"originalLine":23,"originalColumn":40,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":21,"generatedColumn":4,"originalLine":23,"originalColumn":40,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":21,"generatedColumn":4,"originalLine":23,"originalColumn":52,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":21,"generatedColumn":8,"originalLine":24,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":21,"generatedColumn":33,"originalLine":25,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":21,"generatedColumn":56,"originalLine":26,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":21,"generatedColumn":75,"originalLine":27,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":21,"generatedColumn":79,"originalLine":27,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":22,"generatedColumn":4,"originalLine":27,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":22,"generatedColumn":4,"originalLine":27,"originalColumn":10,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":22,"generatedColumn":19,"originalLine":27,"originalColumn":23,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":23,"generatedColumn":4,"originalLine":27,"originalColumn":23,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":23,"generatedColumn":4,"originalLine":28,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":24,"generatedColumn":4,"originalLine":28,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":24,"generatedColumn":4,"originalLine":28,"originalColumn":65,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":24,"generatedColumn":8,"originalLine":29,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":24,"generatedColumn":22,"originalLine":29,"originalColumn":13,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":25,"generatedColumn":4,"originalLine":29,"originalColumn":13,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":25,"generatedColumn":4,"originalLine":30,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":26,"generatedColumn":4,"originalLine":30,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":26,"generatedColumn":4,"originalLine":31,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":27,"generatedColumn":4,"originalLine":31,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":27,"generatedColumn":4,"originalLine":32,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":28,"generatedColumn":4,"originalLine":32,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":28,"generatedColumn":4,"originalLine":33,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":29,"generatedColumn":4,"originalLine":33,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":29,"generatedColumn":4,"originalLine":33,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":29,"generatedColumn":8,"originalLine":33,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":30,"generatedColumn":4,"originalLine":33,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":30,"generatedColumn":4,"originalLine":34,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":31,"generatedColumn":4,"originalLine":34,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":31,"generatedColumn":4,"originalLine":34,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":31,"generatedColumn":9,"originalLine":35,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":31,"generatedColumn":25,"originalLine":35,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":31,"generatedColumn":42,"originalLine":35,"originalColumn":33,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":31,"generatedColumn":48,"originalLine":36,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":31,"generatedColumn":65,"originalLine":36,"originalColumn":16,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":31,"generatedColumn":83,"originalLine":36,"originalColumn":35,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":31,"generatedColumn":88,"originalLine":37,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":31,"generatedColumn":93,"originalLine":37,"originalColumn":4,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":32,"generatedColumn":4,"originalLine":37,"originalColumn":4,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":32,"generatedColumn":4,"originalLine":37,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":32,"generatedColumn":8,"originalLine":38,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":32,"generatedColumn":15,"originalLine":39,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":32,"generatedColumn":19,"originalLine":39,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":33,"generatedColumn":4,"originalLine":39,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":33,"generatedColumn":4,"originalLine":39,"originalColumn":10,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"},{"generatedLine":33,"generatedColumn":8,"originalLine":40,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.catalog.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\n$namespace = nsa.join(\".\");\nconst config = context.getThingConfig(context)\n\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\nExt.define('Modeleditor.store.#{$namespace}.Catalog.#{name}', {\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.Catalog.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.Catalog.#{name}',\n  staticStore:#{context.staticStore},\n  autoLoad:false,\n  autoSync:false,<#if(!context.staticStore && !context.queryResult){#>\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeEmbedded},<#} else {#>\n  remoteFilter:false,\n  remoteSort:false,\n  pageSize: -1,\n  <#- }#>extKeys:{},  <#\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  }<#}#>\n  ]\n  <#- }#>\n});"}]}}