{"version":3,"sources":["generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"],"names":["text","code","expression"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAiBA,IAChBC;AADD,IACCA,AACAA;AAFD,IAECA,AACAA;AAHD,IAGCA,AACAA;AAJD,IAICA,AACAA;AALD,IAKCA,AACAA;AAND,IAMCA,AAAED,IACFA,IACAA,+BAA6BE,oBAAqBF,yBAAuBE,eAAgBF,OACzFA,kBAAgBE,yBAA0BF,MAC1CA,kBAAgBE,kBAAmBF,MACnCA,sCACAA,oBAAiBE,qBAAsBF,4BACvCA,mBACAA,wBACAA,gCACAA,IACAA,uBACAA,aACAA,2BACAA,6BACAA,gCACAA,sDACAA,0DACAA,yFAAuFE,oBAAqBF,GAACE,eAAgBF,OAC7HA,iCACAA,4BACAA,gCACAA,4BACAA,0BAAwBE,qBAAsBF,oBAC9CA,0BAAuBE,qBAAsBF,WAC7CA,0BACAA,gDACAA,gCACAA,+FAA6FE,oBAAqBF,GAACE,eAAgBF,2DACnIA,mBACAA,iBACAA,eACAA,cACAA,aACAA,2BACAA,iCACAA,cACAA,UAAQC;AA3CT,IA2CSA,AACRA;AA5CD,IA4CCA,AACAA;AA7CD,IA6CCA,AACAA;AA9CD,IA8CCA,AACAA;AA/CD,IA+CCA,AACAA;AAhDD,IAgDCA,AACAA;AAjDD,IAiDCA,AAA6BD,IAC7BA,aACAA,oBAAkBE,YAAaF,KAC/BA,+BACAA,sBAAmBE,QAASD;AArD7B,IAqD6BA,AAAuBC,iCAAkCD;AArDtF,IAqDsFA,AAAKD,OAC1FA,0BAAuBE,oEAAqEF,OAC5FA,wBAAqBE,QAASD;AAvD/B,IAuD+BA,AAAuBC,iCAAkCD;AAvDxF,IAuDwFA,AAAKD,OAC5FA,uBAAoBE,cAAeF,MAAGE,oBAAqBF,GAACE,eAAgBF,mBAAiBE,QAASF,IAAEC;AAxDzG,IAwDyGA,AAAuBD,WAAOC;AAxDvI,IAwDuIA,AAAKD,KAC3IA,0BAAuBE,cAAeF,SAAME,oBAAqBF,GAACE,eAAgBF,mBAAiBE,QAASF,uCAAmCE,mBAAoBF,IAAEC;AAzDtK,IAyDsKA,AAAwBD,QAAKE,iBAAkBF,IAACC;AAzDtN,IAyDsNA,AAAKD,KAC1NA,iCACAA,gCACAA,4BACAA,0BAAwBE,qBAAsBF,oBAC9CA,0BACAA,gDACAA,gCACAA,uFAAqFE,oBAAqBF,GAACE,eAAgBF,8FAA4FE,QAASF,SAChOA,mBACAA,iBACAA,eACAA,cACAA,UAAQC;AAtET,IAsESA,AAAiBD,IACzBA,aACAA,oBAAkBE,YAAaF,KAC/BA,6BACAA,sBAAmBE,QAASD;AA1E7B,IA0E6BA,AAAuBC,iCAAkCD;AA1EtF,IA0EsFA,AAAKD,OAC1FA,0BAAuBE,oEAAqEF,OAC5FA,qBAAmBE,uBAAwBF,IAAEE,oBAAqBF,GAACE,eAAgBF,kBACnFA,wBAAsBE,uBAAwBF,QAAME,oBAAqBF,GAACE,eAAgBF,iBAC1FA,0BAAwBE,OAAQF,KAAGE,oBAAqBF,GAACE,eAAgBF,kBACzEA,gCACAA,4BACAA,0BAAwBE,qBAAsBF,oBAC9CA,0BACAA,gDACAA,gCACAA,6FAA2FE,oBAAqBF,GAACE,eAAgBF,8FAA4FE,QAASF,SACtOA,mBACAA,iBACAA,eACAA,cACAA,UAAQC;AA1FT,IA0FSA,AACRA;AA3FD,IA2FCA,AACAA;AA5FD,IA4FCA,AACAA;AA7FD,IA6FCA,AACAA;AA9FD,IA8FCA,AACAA;AA/FD,IA+FCA,AACAA;AAhGD,IAgGCA,AACAA;AAjGD,IAiGCA,AACAA;AAlGD,IAkGCA,AACAA;AAnGD,IAmGCA,AACAA;AApGD,IAoGCA,AACAA;AArGD,IAqGCA,AACAA;AAtGD,IAsGCA,AAAkDD,IAClDA,8CAA4CE,oBAAqBF,GAACE,eAAgBF,cAAYE,gBAAiBF,SAC/GA,UAAQC;AAxGT,IAwGSA,AACRA;AAzGD,IAyGCA,AACAA;AA1GD,IA0GCA,AACAA;AA3GD,IA2GCA,AAAUD,IACVA,QAAMC;AA5GP,IA4GOA,AAAgDD,IACtDA,UAAQC;AA7GT,IA6GSA,AACRA;AA9GD,IA8GCA,AACAA;AA/GD,IA+GCA,AAAUD,IACVA,+CAA4CE,oBAAqBF,GAACE,eAAgBF,oBAAgBE,cAAeF,UACjHA,UAAQC;AAjHT,IAiHSA,AAAKD,IACbA,QAAMC;AAlHP,IAkHOA,AAAKD,IACXA,YACAA,IACAA,0BACAA,mCACAA,wDACAA,WACAA,mfile":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":48,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":49,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":50,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":51,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":52,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":53,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":54,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":55,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":56,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":57,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":58,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":59,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":60,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":61,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":62,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":63,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":64,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":65,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":66,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":67,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":68,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":69,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":70,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":71,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":72,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":73,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":74,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":75,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":76,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":77,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":78,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":79,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":80,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":81,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":82,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":83,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":84,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":85,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":86,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":87,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":88,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":89,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":90,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":91,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":92,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":93,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":94,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":95,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":96,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":97,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":98,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":99,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":100,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":101,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":102,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":103,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":104,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":105,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":106,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":107,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":108,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":109,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":110,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":111,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":112,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":113,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":114,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":115,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":116,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":117,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":118,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":119,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":120,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":121,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":122,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":123,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":124,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":125,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":126,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":127,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":128,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":129,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":130,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":131,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":132,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":133,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":134,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":135,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":136,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":137,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":138,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":139,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":140,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":141,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":142,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":143,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":144,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":145,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":146,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":147,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":148,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":149,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":150,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":151,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":152,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":153,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":154,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":155,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":156,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":157,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":158,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":159,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":160,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":161,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":162,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":163,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":164,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":165,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":166,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":167,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":168,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":169,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":170,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":171,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":172,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":173,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":174,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":175,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":176,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":177,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js"},{"generatedLine":8,"generatedColumn":4,"originalLine":1,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":8,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":9,"generatedColumn":4,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":9,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":10,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":10,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":4,"originalLine":6,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":4,"originalLine":6,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":4,"originalLine":7,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":4,"originalLine":7,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":4,"originalLine":7,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":8,"originalLine":8,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":12,"originalLine":9,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":43,"originalLine":9,"originalColumn":30,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":63,"originalLine":9,"originalColumn":51,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":88,"originalLine":9,"originalColumn":74,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":103,"originalLine":9,"originalColumn":90,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":110,"originalLine":10,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":128,"originalLine":10,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":153,"originalLine":10,"originalColumn":43,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":159,"originalLine":11,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":177,"originalLine":11,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":195,"originalLine":11,"originalColumn":36,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":201,"originalLine":12,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":239,"originalLine":13,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":259,"originalLine":13,"originalColumn":18,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":280,"originalLine":13,"originalColumn":40,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":308,"originalLine":14,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":327,"originalLine":15,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":351,"originalLine":16,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":383,"originalLine":17,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":387,"originalLine":18,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":410,"originalLine":19,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":423,"originalLine":20,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":450,"originalLine":21,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":479,"originalLine":22,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":511,"originalLine":23,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":565,"originalLine":24,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":623,"originalLine":25,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":712,"originalLine":25,"originalColumn":88,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":732,"originalLine":25,"originalColumn":109,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":735,"originalLine":25,"originalColumn":110,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":750,"originalLine":25,"originalColumn":126,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":757,"originalLine":26,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":790,"originalLine":27,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":818,"originalLine":28,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":850,"originalLine":29,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":878,"originalLine":30,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":904,"originalLine":30,"originalColumn":25,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":925,"originalLine":30,"originalColumn":47,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":945,"originalLine":31,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":971,"originalLine":31,"originalColumn":24,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":992,"originalLine":31,"originalColumn":46,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1003,"originalLine":32,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1029,"originalLine":33,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1077,"originalLine":34,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1109,"originalLine":35,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1204,"originalLine":35,"originalColumn":94,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1224,"originalLine":35,"originalColumn":115,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1227,"originalLine":35,"originalColumn":116,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1242,"originalLine":35,"originalColumn":132,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1301,"originalLine":36,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1320,"originalLine":37,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1337,"originalLine":38,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1352,"originalLine":39,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1366,"originalLine":40,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1379,"originalLine":41,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1406,"originalLine":42,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1439,"originalLine":43,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1453,"originalLine":44,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1463,"originalLine":44,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":4,"originalLine":44,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":4,"originalLine":45,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":16,"generatedColumn":4,"originalLine":45,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":16,"generatedColumn":4,"originalLine":46,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":17,"generatedColumn":4,"originalLine":46,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":17,"generatedColumn":4,"originalLine":47,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":18,"generatedColumn":4,"originalLine":47,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":18,"generatedColumn":4,"originalLine":48,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":4,"originalLine":48,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":4,"originalLine":49,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":4,"originalLine":49,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":4,"originalLine":50,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4,"originalLine":50,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4,"originalLine":50,"originalColumn":30,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":8,"originalLine":51,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":21,"originalLine":52,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":41,"originalLine":52,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":53,"originalLine":52,"originalColumn":32,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":58,"originalLine":53,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":89,"originalLine":54,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":111,"originalLine":54,"originalColumn":20,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":119,"originalLine":54,"originalColumn":29,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":22,"generatedColumn":4,"originalLine":54,"originalColumn":29,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":22,"generatedColumn":4,"originalLine":54,"originalColumn":52,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":22,"generatedColumn":37,"originalLine":54,"originalColumn":86,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":23,"generatedColumn":4,"originalLine":54,"originalColumn":86,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":23,"generatedColumn":4,"originalLine":54,"originalColumn":91,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":23,"generatedColumn":11,"originalLine":55,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":23,"generatedColumn":37,"originalLine":55,"originalColumn":24,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":23,"generatedColumn":105,"originalLine":55,"originalColumn":93,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":23,"generatedColumn":112,"originalLine":56,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":23,"generatedColumn":136,"originalLine":56,"originalColumn":22,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":23,"generatedColumn":144,"originalLine":56,"originalColumn":31,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":24,"generatedColumn":4,"originalLine":56,"originalColumn":31,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":24,"generatedColumn":4,"originalLine":56,"originalColumn":54,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":24,"generatedColumn":37,"originalLine":56,"originalColumn":88,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":25,"generatedColumn":4,"originalLine":56,"originalColumn":88,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":25,"generatedColumn":4,"originalLine":56,"originalColumn":93,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":25,"generatedColumn":11,"originalLine":57,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":25,"generatedColumn":34,"originalLine":57,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":25,"generatedColumn":48,"originalLine":57,"originalColumn":36,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":25,"generatedColumn":54,"originalLine":57,"originalColumn":39,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":25,"generatedColumn":74,"originalLine":57,"originalColumn":60,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":25,"generatedColumn":77,"originalLine":57,"originalColumn":61,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":25,"generatedColumn":92,"originalLine":57,"originalColumn":77,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":25,"generatedColumn":111,"originalLine":57,"originalColumn":94,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":25,"generatedColumn":119,"originalLine":57,"originalColumn":103,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":25,"generatedColumn":123,"originalLine":57,"originalColumn":105,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":26,"generatedColumn":4,"originalLine":57,"originalColumn":105,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":26,"generatedColumn":4,"originalLine":57,"originalColumn":128,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":26,"generatedColumn":15,"originalLine":57,"originalColumn":135,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":27,"generatedColumn":4,"originalLine":57,"originalColumn":135,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":27,"generatedColumn":4,"originalLine":57,"originalColumn":140,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":27,"generatedColumn":9,"originalLine":58,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":27,"generatedColumn":35,"originalLine":58,"originalColumn":24,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":27,"generatedColumn":49,"originalLine":58,"originalColumn":39,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":27,"generatedColumn":58,"originalLine":58,"originalColumn":45,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":27,"generatedColumn":78,"originalLine":58,"originalColumn":66,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":27,"generatedColumn":81,"originalLine":58,"originalColumn":67,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":27,"generatedColumn":96,"originalLine":58,"originalColumn":83,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":27,"generatedColumn":115,"originalLine":58,"originalColumn":100,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":27,"generatedColumn":123,"originalLine":58,"originalColumn":109,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":27,"generatedColumn":162,"originalLine":58,"originalColumn":144,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":27,"generatedColumn":181,"originalLine":58,"originalColumn":164,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":27,"generatedColumn":185,"originalLine":58,"originalColumn":166,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":28,"generatedColumn":4,"originalLine":58,"originalColumn":166,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":28,"generatedColumn":4,"originalLine":58,"originalColumn":190,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":28,"generatedColumn":12,"originalLine":58,"originalColumn":195,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":28,"generatedColumn":29,"originalLine":58,"originalColumn":213,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":28,"generatedColumn":33,"originalLine":58,"originalColumn":214,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":4,"originalLine":58,"originalColumn":214,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":4,"originalLine":58,"originalColumn":219,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":9,"originalLine":59,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":42,"originalLine":60,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":74,"originalLine":61,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":102,"originalLine":62,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":128,"originalLine":62,"originalColumn":25,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":149,"originalLine":62,"originalColumn":47,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":169,"originalLine":63,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":195,"originalLine":64,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":243,"originalLine":65,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":275,"originalLine":66,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":362,"originalLine":66,"originalColumn":86,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":382,"originalLine":66,"originalColumn":107,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":385,"originalLine":66,"originalColumn":108,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":400,"originalLine":66,"originalColumn":124,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":494,"originalLine":66,"originalColumn":216,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":502,"originalLine":66,"originalColumn":225,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":511,"originalLine":67,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":530,"originalLine":68,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":547,"originalLine":69,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":562,"originalLine":70,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":576,"originalLine":71,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":586,"originalLine":71,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":30,"generatedColumn":4,"originalLine":71,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":30,"generatedColumn":4,"originalLine":71,"originalColumn":26,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":30,"generatedColumn":8,"originalLine":72,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":30,"generatedColumn":21,"originalLine":73,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":30,"generatedColumn":41,"originalLine":73,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":30,"generatedColumn":53,"originalLine":73,"originalColumn":32,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":30,"generatedColumn":58,"originalLine":74,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":30,"generatedColumn":87,"originalLine":75,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":30,"generatedColumn":109,"originalLine":75,"originalColumn":20,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":30,"generatedColumn":117,"originalLine":75,"originalColumn":29,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":31,"generatedColumn":4,"originalLine":75,"originalColumn":29,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":31,"generatedColumn":4,"originalLine":75,"originalColumn":52,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":31,"generatedColumn":37,"originalLine":75,"originalColumn":86,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":4,"originalLine":75,"originalColumn":86,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":4,"originalLine":75,"originalColumn":91,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":11,"originalLine":76,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":37,"originalLine":76,"originalColumn":24,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":105,"originalLine":76,"originalColumn":93,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":112,"originalLine":77,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":133,"originalLine":77,"originalColumn":20,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":156,"originalLine":77,"originalColumn":44,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":160,"originalLine":77,"originalColumn":46,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":180,"originalLine":77,"originalColumn":67,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":183,"originalLine":77,"originalColumn":68,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":198,"originalLine":77,"originalColumn":84,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":216,"originalLine":78,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":240,"originalLine":78,"originalColumn":23,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":263,"originalLine":78,"originalColumn":47,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":271,"originalLine":78,"originalColumn":53,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":291,"originalLine":78,"originalColumn":74,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":294,"originalLine":78,"originalColumn":75,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":309,"originalLine":78,"originalColumn":91,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":326,"originalLine":79,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":352,"originalLine":79,"originalColumn":25,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":359,"originalLine":79,"originalColumn":33,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":364,"originalLine":79,"originalColumn":36,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":384,"originalLine":79,"originalColumn":57,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":387,"originalLine":79,"originalColumn":58,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":402,"originalLine":79,"originalColumn":74,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":420,"originalLine":80,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":452,"originalLine":81,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":480,"originalLine":82,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":506,"originalLine":82,"originalColumn":25,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":527,"originalLine":82,"originalColumn":47,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":547,"originalLine":83,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":573,"originalLine":84,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":621,"originalLine":85,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":653,"originalLine":86,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":746,"originalLine":86,"originalColumn":92,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":766,"originalLine":86,"originalColumn":113,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":769,"originalLine":86,"originalColumn":114,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":784,"originalLine":86,"originalColumn":130,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":878,"originalLine":86,"originalColumn":222,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":886,"originalLine":86,"originalColumn":231,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":895,"originalLine":87,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":914,"originalLine":88,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":931,"originalLine":89,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":946,"originalLine":90,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":960,"originalLine":91,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":32,"generatedColumn":970,"originalLine":91,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":33,"generatedColumn":4,"originalLine":91,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":33,"generatedColumn":4,"originalLine":92,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":34,"generatedColumn":4,"originalLine":92,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":34,"generatedColumn":4,"originalLine":93,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":35,"generatedColumn":4,"originalLine":93,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":35,"generatedColumn":4,"originalLine":94,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":36,"generatedColumn":4,"originalLine":94,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":36,"generatedColumn":4,"originalLine":95,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":37,"generatedColumn":4,"originalLine":95,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":37,"generatedColumn":4,"originalLine":96,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":38,"generatedColumn":4,"originalLine":96,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":38,"generatedColumn":4,"originalLine":97,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":39,"generatedColumn":4,"originalLine":97,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":39,"generatedColumn":4,"originalLine":98,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":40,"generatedColumn":4,"originalLine":98,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":40,"generatedColumn":4,"originalLine":99,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":41,"generatedColumn":4,"originalLine":99,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":41,"generatedColumn":4,"originalLine":100,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":42,"generatedColumn":4,"originalLine":100,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":42,"generatedColumn":4,"originalLine":101,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":4,"originalLine":101,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":43,"generatedColumn":4,"originalLine":102,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":44,"generatedColumn":4,"originalLine":102,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":44,"generatedColumn":4,"originalLine":103,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":45,"generatedColumn":4,"originalLine":103,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":45,"generatedColumn":4,"originalLine":103,"originalColumn":51,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":45,"generatedColumn":8,"originalLine":104,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":45,"generatedColumn":54,"originalLine":104,"originalColumn":45,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":45,"generatedColumn":74,"originalLine":104,"originalColumn":66,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":45,"generatedColumn":77,"originalLine":104,"originalColumn":67,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":45,"generatedColumn":92,"originalLine":104,"originalColumn":83,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":45,"generatedColumn":106,"originalLine":104,"originalColumn":95,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":45,"generatedColumn":122,"originalLine":104,"originalColumn":112,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":45,"generatedColumn":131,"originalLine":105,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":45,"generatedColumn":141,"originalLine":105,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":4,"originalLine":105,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":46,"generatedColumn":4,"originalLine":106,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":47,"generatedColumn":4,"originalLine":106,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":47,"generatedColumn":4,"originalLine":107,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":48,"generatedColumn":4,"originalLine":107,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":48,"generatedColumn":4,"originalLine":108,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":49,"generatedColumn":4,"originalLine":108,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":49,"generatedColumn":4,"originalLine":108,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":49,"generatedColumn":8,"originalLine":109,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":49,"generatedColumn":16,"originalLine":109,"originalColumn":7,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":50,"generatedColumn":4,"originalLine":109,"originalColumn":7,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":50,"generatedColumn":4,"originalLine":109,"originalColumn":55,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":50,"generatedColumn":8,"originalLine":110,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":50,"generatedColumn":18,"originalLine":110,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":51,"generatedColumn":4,"originalLine":110,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":51,"generatedColumn":4,"originalLine":111,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":52,"generatedColumn":4,"originalLine":111,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":52,"generatedColumn":4,"originalLine":112,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":4,"originalLine":112,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":4,"originalLine":112,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":8,"originalLine":113,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":55,"originalLine":113,"originalColumn":45,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":75,"originalLine":113,"originalColumn":66,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":78,"originalLine":113,"originalColumn":67,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":93,"originalLine":113,"originalColumn":83,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":113,"originalLine":113,"originalColumn":99,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":127,"originalLine":113,"originalColumn":114,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":137,"originalLine":114,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":53,"generatedColumn":147,"originalLine":114,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":54,"generatedColumn":4,"originalLine":114,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":54,"generatedColumn":4,"originalLine":114,"originalColumn":14,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":54,"generatedColumn":8,"originalLine":115,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":54,"generatedColumn":16,"originalLine":115,"originalColumn":7,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":55,"generatedColumn":4,"originalLine":115,"originalColumn":7,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":55,"generatedColumn":4,"originalLine":115,"originalColumn":12,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":55,"generatedColumn":8,"originalLine":116,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":55,"generatedColumn":20,"originalLine":117,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":55,"generatedColumn":24,"originalLine":118,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":55,"generatedColumn":50,"originalLine":119,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":55,"generatedColumn":85,"originalLine":120,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":55,"generatedColumn":141,"originalLine":121,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":55,"generatedColumn":152,"originalLine":122,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":55,"generatedColumn":187,"originalLine":123,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":55,"generatedColumn":194,"originalLine":124,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.FormNavigationToolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const getRS = context.getRS\n  const makeRelVariants = context.makeRelVariants\n  const iterateGroups = context.iterateRelGroups\n  const localStateMachine = context.stateMachine;\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.FormNavigationToolbar.#{context.$name}',{\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: \"Ext.toolbar.Toolbar\",\n  alias: \"widget.#{context.$widgetName}formnavigationtoolbar\",\n  dock: 'left',\n  overflowY: 'auto',\n  initComponent: function(){\n\n    const items = [\n        {\n          _order:-1000,\n          xtype:'button',\n          itemId: 'General',\n          text: _t('General', 'SYSTEM', 'titles'),\n          relGroup: _t('General', 'SYSTEM', 'titles'),\n          iconCls: _r('General','', 'SYSTEM','titles', 'iconCls') || _r('iconCls','', '#{context.$namespace}.#{context.$name}'),\n          enableToggle: true,\n          pressed: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          widgetName: \"#{context.$widgetName}edit\",\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation General Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, widgetName: btn.widgetName });\n              }\n            }\n          }\n        },\n        {\n          _order: -999,\n          xtype:'tbseparator'\n        },\n        <#\n\n        if(context.navigationRels) {\n            iterateGroups(makeRelVariants(context.navigationRels), (variant, rel, relIndex, variantIndex)=>{\n              let rs = getRS(rel);\n              let group = rel._toGroup;\n              if (!group) {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:\"button\",\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          propname: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          text: _t(\"#{rs.toDisplay}\",'#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}')<#if(rel.toRequired){#> + \" *\"<#}#>,\n          iconCls: _r(\"#{rs.toDisplay}\",'','#{context.$namespace}.#{context.$name}' ,'toDisplay', '#{rel.to}', 'iconCls') || _r(\"iconCls\",'', '#{rel.ref.thingType}')<#if(rel.ref.iconCls){#> || \"#{rel.ref.iconCls}\"<#}#>,\n          enableToggle: true,\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, propname: btn.propname, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#     } else {#>\n        {\n          _order: #{rs.toOrder},\n          xtype:'button',\n          itemId: \"#{rel.to}<#if(variant!== '*'){#>#{rel.relName.split('.').join('')}<#}#>\",\n          widgetname: \"#{([rel.refNorm.namespace, rel.refNorm.name].join(\"\")).toLowerCase()}\",\n          text: _t(#{JSON.stringify(group)},'#{context.$namespace}.#{context.$name}', 'buttons'),\n          iconCls: _r(#{JSON.stringify(group)},'', '#{context.$namespace}.#{context.$name}','iconCls'),\n          relGroup: _t('#{group}','#{context.$namespace}.#{context.$name}', 'toGroup'),\n          textAlign: 'left',\n          minWidth: 160,\n          toggleGroup: '#{context.$widgetName}FormNavigation',\n          listeners: {\n            toggle: function(btn, pressed) {\n              if (pressed) {\n                DirectCacheLogger.userStories('Form Navigation Group Tab', { serverModel: '#{context.$namespace}.#{context.$name}', buttonId: btn.itemId, relGroup: btn.relGroup, widgetName: btn.widgetname, relationName: '#{rel.to}' });\n              }\n            }\n          }\n        },\n        <#-       }\n            })\n        }\n          if (context.clientMethods) {\n            let clMeth = context.clientMethods.filter(\n              m=>(m.type == 'button' || m.type == 'toggle') &&\n                !m.disable &&\n                !m.currentSettings?.hidden &&\n                !m.currentSettings?.showInsideForm\n              );\n\n            let separatorExist = false\n            for (let i=0; i<clMeth.length; i++){#>\n        Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{clMeth[i].name}'](),\n        <#\n            }\n          }\n        #>\n      <#if (localStateMachine && context.debugSM) { #>\n        <# for (let i = localStateMachine.event.length - 1; i >= 0; i--) {\n            let ev = localStateMachine.event[i]\n        #>\n        Grainjs.metadata[\"metaclientmethods.#{context.$namespace}.#{context.$name}\"].buttons[\"btn_#{ev.eventName}\"](),\n        <#}#>\n      <#}#>\n      ];\n\n    Ext.apply( this, {\n      type: \"formNavigation\",\n      items: items.sort((a,b)=> a._order - b._order)\n    });\n    this.callParent(arguments);\n  }\n});"}]}}