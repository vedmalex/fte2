{"version":3,"sources":["generators/server/Meta.Thing/ext.view-thing.Search.njs.js"],"names":["text","expression","code"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAECA,+BAA6BC,oBAAqBD,UAAQC,eAAgBD,QAC1EA,kBAAgBC,yBAA0BD,MAC1CA,kBAAgBC,kBAAmBD,MACnCA,+BACAA,2BACAA,mBAAiBC,qBAAsBD,YACvCA,uBACAA,oBACAA,aAAWC,qBAAsBD,MACjCA,oCAAkCC,oBAAqBD,GAACC,eAAgBD,KAAGE;AAX5E,IAW4EA,AAAwBF,OAAIC,iBAAkBD,IAACE;AAX3H,IAW2HA,AAAKF,MAC/HA,eAAaC,oBAAqBA,eAAgBD,MAClDA,kCAAgCC,oBAAqBD,GAACC,eAAgBD,MACtEA,iBACAA,0BACAA,2BACAA,sBACAA,QACAA,IAAEE;AAnBH,IAmBGA,AACFA;AApBD,IAoBCA,AACAA;AArBD,IAqBCA,AAA6FF,IAC7FA,8CAA4CC,oBAAqBD,GAACC,eAAgBD,wBAClFA,IAAEE;AAvBH,IAuBGA,AACAA;AAxBH,IAwBGA,AAAsDF,IACxDA,yBACAA,IAAEE;AA1BH,IA0BGA,AAAKF,IACPA,IACAA,iCACAA,uBACAA,kFAAgFC,oBAAqBD,GAACC,eAAgBD,2DACtHA,qBACAA,WACAA,uBACAA,oDACAA,wBACAA,YACAA,WACAA,wBACAA,oDACAA,wBACAA,YACAA,QAAME;AA1CP,IA0COA,AACNA;AA3CD,IA2CCA,AACAA;AA5CD,IA4CCA,AACAA;AA7CD,IA6CCA,AACAA;AA9CD,IA8CCA,AACAA;AA/CD,IA+CCA,AACAA;AAhDD,IAgDCA,AACAA;AAjDD,IAiDCA,AACAA;AAlDD,IAkDCA,AACAA;AAnDD,IAmDCA,AACAA;AApDD,IAoDCA,AAAkBF,IAClBA,iDAA+CC,oBAAqBD,GAACC,eAAgBD,MAAIC,uBAAwBD,IAAEC,eAAgBD,sBACrHE;AAtDf,IAsDeA,AACdA;AAvDD,IAuDCA,AACAA;AAxDD,IAwDCA,AACAA;AAzDD,IAyDCA,AACAA;AA1DD,IA0DCA,AACAA;AA3DD,IA2DCA,AAAcF,IACdA,8CAA4CC,oBAAqBD,GAACC,eAAgBD,MAAIC,gBAAiBD,uCAAqCE;AA5D7I,IA4D6IA,AAC5IA;AA7DD,IA6DCA,AACAA;AA9DD,IA8DCA,AAAcF,OACdA,cAAYE;AA/Db,IA+DaA,AACZA;AAhED,IAgECA,AACAA;AAjED,IAiECA,AACAA;AAlED,IAkECA,AACAA;AAnED,IAmECA,AACAA;AApED,IAoECA,AACAA;AArED,IAqECA,AACAA;AAtED,IAsECA,AAAoCF,IACpCA,UACAA,8BACAA,6BACAA,6BACAA,qCACAA,iCACAA,iCACAA,kEACAA,uBACAA,gCACAA,6BACAA,iCACAA,cACAA,qBACAA,6BACAA,oEACAA,+BACAA,gCACAA,yCACAA,eACAA,6BACAA,oEACAA,+BACAA,gCACAA,yCACAA,cACAA,aACAA,2BACAA,qCACAA,qCACAA,mCACAA,mCACAA,sBACAA,yBACAA,4BACAA,cACAA,YACAA,SACAA,wBACAA,gBACAA,sBACAA,oCACAA,gFAA8EC,oBAAqBD,GAACC,eAAgBD,2DACpHA,cACAA,oEACAA,sFAAoFC,oBAAqBD,GAACC,eAAgBD,yFAC1HA,cACAA,mCACAA,+EAA6EC,oBAAqBD,GAACC,eAAgBD,0BACnHA,aACAA,WACAA,WACAA,mfile":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":48,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":49,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":50,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":51,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":52,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":53,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":54,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":55,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":56,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":57,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":58,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":59,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":60,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":61,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":62,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":63,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":64,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":65,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":66,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":67,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":68,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":69,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":70,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":71,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":72,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":73,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":74,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":75,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":76,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":77,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":78,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":79,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":80,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":81,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":82,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":83,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":84,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":85,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":86,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":87,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":88,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":89,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":90,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":91,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":92,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":93,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":94,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":95,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":96,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":97,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":98,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":99,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":100,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":101,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":102,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":103,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":104,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":105,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":106,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":107,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":108,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":109,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":110,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":111,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":112,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":113,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":114,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":115,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":116,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":117,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":118,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":119,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":120,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":121,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":122,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":123,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":124,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":125,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":126,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":127,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":128,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":129,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":130,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":131,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":132,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":133,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":134,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":135,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":136,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":137,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":138,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":139,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":140,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":141,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":142,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":143,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":144,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":145,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":146,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":147,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":148,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":149,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":150,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":151,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":152,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":153,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":154,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":155,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":156,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":157,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js"},{"generatedLine":8,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":35,"originalLine":3,"originalColumn":30,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":55,"originalLine":3,"originalColumn":51,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":65,"originalLine":3,"originalColumn":59,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":80,"originalLine":3,"originalColumn":75,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":88,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":106,"originalLine":4,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":131,"originalLine":4,"originalColumn":43,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":137,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":155,"originalLine":5,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":173,"originalLine":5,"originalColumn":36,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":179,"originalLine":6,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":210,"originalLine":7,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":237,"originalLine":8,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":256,"originalLine":8,"originalColumn":18,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":277,"originalLine":8,"originalColumn":40,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":289,"originalLine":9,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":312,"originalLine":10,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":332,"originalLine":11,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":345,"originalLine":11,"originalColumn":12,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":366,"originalLine":11,"originalColumn":34,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":372,"originalLine":12,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":408,"originalLine":12,"originalColumn":35,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":428,"originalLine":12,"originalColumn":56,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":431,"originalLine":12,"originalColumn":57,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":446,"originalLine":12,"originalColumn":73,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":451,"originalLine":12,"originalColumn":76,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":9,"generatedColumn":4,"originalLine":12,"originalColumn":76,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":9,"generatedColumn":4,"originalLine":12,"originalColumn":100,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":9,"generatedColumn":11,"originalLine":12,"originalColumn":104,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":9,"generatedColumn":28,"originalLine":12,"originalColumn":122,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":9,"generatedColumn":32,"originalLine":12,"originalColumn":123,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":4,"originalLine":12,"originalColumn":123,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":4,"originalLine":12,"originalColumn":128,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":10,"originalLine":13,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":25,"originalLine":13,"originalColumn":14,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":45,"originalLine":13,"originalColumn":35,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":60,"originalLine":13,"originalColumn":51,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":66,"originalLine":14,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":100,"originalLine":14,"originalColumn":33,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":120,"originalLine":14,"originalColumn":54,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":123,"originalLine":14,"originalColumn":55,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":138,"originalLine":14,"originalColumn":71,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":144,"originalLine":15,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":161,"originalLine":16,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":187,"originalLine":17,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":214,"originalLine":18,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":236,"originalLine":19,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":244,"originalLine":20,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":248,"originalLine":20,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":4,"originalLine":20,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":4,"originalLine":21,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":4,"originalLine":21,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":4,"originalLine":22,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":4,"originalLine":22,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":4,"originalLine":22,"originalColumn":94,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":8,"originalLine":23,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":54,"originalLine":23,"originalColumn":45,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":74,"originalLine":23,"originalColumn":66,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":77,"originalLine":23,"originalColumn":67,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":92,"originalLine":23,"originalColumn":83,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":116,"originalLine":24,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":120,"originalLine":24,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":14,"generatedColumn":4,"originalLine":24,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":14,"generatedColumn":4,"originalLine":25,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":15,"generatedColumn":4,"originalLine":25,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":15,"generatedColumn":4,"originalLine":25,"originalColumn":57,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":15,"generatedColumn":8,"originalLine":26,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":15,"generatedColumn":33,"originalLine":27,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":15,"generatedColumn":37,"originalLine":27,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":4,"originalLine":27,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":4,"originalLine":27,"originalColumn":8,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":8,"originalLine":28,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":12,"originalLine":29,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":45,"originalLine":30,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":68,"originalLine":31,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":150,"originalLine":31,"originalColumn":81,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":170,"originalLine":31,"originalColumn":102,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":173,"originalLine":31,"originalColumn":103,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":188,"originalLine":31,"originalColumn":119,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":247,"originalLine":32,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":268,"originalLine":33,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":279,"originalLine":34,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":302,"originalLine":35,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":354,"originalLine":36,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":378,"originalLine":37,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":390,"originalLine":38,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":401,"originalLine":39,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":425,"originalLine":40,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":477,"originalLine":41,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":501,"originalLine":42,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":513,"originalLine":43,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":521,"originalLine":43,"originalColumn":7,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":4,"originalLine":43,"originalColumn":7,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":4,"originalLine":44,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":4,"originalLine":44,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":4,"originalLine":45,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":4,"originalLine":45,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":4,"originalLine":46,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":4,"originalLine":46,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":4,"originalLine":47,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":4,"originalLine":47,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":4,"originalLine":48,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":4,"originalLine":48,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":4,"originalLine":49,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":23,"generatedColumn":4,"originalLine":49,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":23,"generatedColumn":4,"originalLine":50,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":4,"originalLine":50,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":4,"originalLine":51,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":25,"generatedColumn":4,"originalLine":51,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":25,"generatedColumn":4,"originalLine":52,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":26,"generatedColumn":4,"originalLine":52,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":26,"generatedColumn":4,"originalLine":53,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":4,"originalLine":53,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":4,"originalLine":53,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":8,"originalLine":54,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":57,"originalLine":54,"originalColumn":48,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":77,"originalLine":54,"originalColumn":69,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":80,"originalLine":54,"originalColumn":70,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":95,"originalLine":54,"originalColumn":86,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":101,"originalLine":54,"originalColumn":90,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":124,"originalLine":54,"originalColumn":114,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":128,"originalLine":54,"originalColumn":116,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":143,"originalLine":54,"originalColumn":132,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":165,"originalLine":55,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":28,"generatedColumn":4,"originalLine":55,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":28,"generatedColumn":4,"originalLine":56,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":4,"originalLine":56,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":4,"originalLine":57,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":30,"generatedColumn":4,"originalLine":57,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":30,"generatedColumn":4,"originalLine":58,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":4,"originalLine":58,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":4,"originalLine":59,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":32,"generatedColumn":4,"originalLine":59,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":32,"generatedColumn":4,"originalLine":60,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":4,"originalLine":60,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":4,"originalLine":60,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":8,"originalLine":61,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":54,"originalLine":61,"originalColumn":45,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":74,"originalLine":61,"originalColumn":66,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":77,"originalLine":61,"originalColumn":67,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":92,"originalLine":61,"originalColumn":83,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":98,"originalLine":61,"originalColumn":87,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":114,"originalLine":61,"originalColumn":104,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":153,"originalLine":61,"originalColumn":141,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":34,"generatedColumn":4,"originalLine":61,"originalColumn":141,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":34,"generatedColumn":4,"originalLine":62,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":35,"generatedColumn":4,"originalLine":62,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":35,"generatedColumn":4,"originalLine":63,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":36,"generatedColumn":4,"originalLine":63,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":36,"generatedColumn":4,"originalLine":63,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":36,"generatedColumn":11,"originalLine":64,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":36,"generatedColumn":25,"originalLine":64,"originalColumn":13,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":37,"generatedColumn":4,"originalLine":64,"originalColumn":13,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":37,"generatedColumn":4,"originalLine":65,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":38,"generatedColumn":4,"originalLine":65,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":38,"generatedColumn":4,"originalLine":66,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":39,"generatedColumn":4,"originalLine":66,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":39,"generatedColumn":4,"originalLine":67,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":40,"generatedColumn":4,"originalLine":67,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":40,"generatedColumn":4,"originalLine":68,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":41,"generatedColumn":4,"originalLine":68,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":41,"generatedColumn":4,"originalLine":69,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":42,"generatedColumn":4,"originalLine":69,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":42,"generatedColumn":4,"originalLine":70,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":43,"generatedColumn":4,"originalLine":70,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":43,"generatedColumn":4,"originalLine":71,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":4,"originalLine":71,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":4,"originalLine":71,"originalColumn":37,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":8,"originalLine":72,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":18,"originalLine":73,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":48,"originalLine":74,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":77,"originalLine":75,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":106,"originalLine":76,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":143,"originalLine":77,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":176,"originalLine":78,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":209,"originalLine":79,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":275,"originalLine":80,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":298,"originalLine":81,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":330,"originalLine":82,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":359,"originalLine":83,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":392,"originalLine":84,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":406,"originalLine":85,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":427,"originalLine":86,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":456,"originalLine":87,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":524,"originalLine":88,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":555,"originalLine":89,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":587,"originalLine":90,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":628,"originalLine":91,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":643,"originalLine":92,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":672,"originalLine":93,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":740,"originalLine":94,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":771,"originalLine":95,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":803,"originalLine":96,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":844,"originalLine":97,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":858,"originalLine":98,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":871,"originalLine":99,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":898,"originalLine":100,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":935,"originalLine":101,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":972,"originalLine":102,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1007,"originalLine":103,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1042,"originalLine":104,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1064,"originalLine":105,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1089,"originalLine":106,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1117,"originalLine":107,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1131,"originalLine":108,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1143,"originalLine":109,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1152,"originalLine":110,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1176,"originalLine":111,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1192,"originalLine":112,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1214,"originalLine":113,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1250,"originalLine":114,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1330,"originalLine":114,"originalColumn":79,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1350,"originalLine":114,"originalColumn":100,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1353,"originalLine":114,"originalColumn":101,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1368,"originalLine":114,"originalColumn":117,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1427,"originalLine":115,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1441,"originalLine":116,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1509,"originalLine":117,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1595,"originalLine":117,"originalColumn":85,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1615,"originalLine":117,"originalColumn":106,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1618,"originalLine":117,"originalColumn":107,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1633,"originalLine":117,"originalColumn":123,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1722,"originalLine":118,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1736,"originalLine":119,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1771,"originalLine":120,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1850,"originalLine":120,"originalColumn":78,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1870,"originalLine":120,"originalColumn":99,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1873,"originalLine":120,"originalColumn":100,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1888,"originalLine":120,"originalColumn":116,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1914,"originalLine":121,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1927,"originalLine":122,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1938,"originalLine":123,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1949,"originalLine":124,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1984,"originalLine":125,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":1991,"originalLine":126,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Search.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.Search.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Ext.form.Panel',\n  property: { root:1 },\n  alias: 'widget.#{context.$widgetName}search',\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n  // iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  <#\n    const localStateMachine = context.stateMachine;\n    if(localStateMachine && localStateMachine.event && localStateMachine.event.length > 0){#>\n  stateMachineHash: Grainjs.metadata['model.#{context.$namespace}.#{context.$name}'].stateMachineHash,\n  <#}#>\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n\n  initComponent: function() {\n    const me = this\n    DirectCacheLogger.userStories('Search Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n    let items = [\n      {\n        name: 'id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      {\n        name: '_id',\n        fieldLabel: _t('id','SYSTEM', 'labels'),\n        hidden: true\n      },\n      <#\n      //generate properties which not in fieldsets\n      function builItems(items) {\n        for( let i = 0; i< items.length; i +=1){\n          const item = items[i]\n          switch(item.type){\n            case 'property':\n            const f = item.item\n            const property = f.property\n            if(!f.hiddenForSearch){\n                #>\n                Grainjs.metadata['searchfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](me.customSearch),\n              <#- }\n            break\n            case 'fieldset':\n            const fs = item.item\n            if(fs.formItems?.length > 0 && !fs.hiddenForSearch) {\n            #>\n            Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}'][`#{fs.displayName}${me.customSearch ? '':'-search'}`]([<#\n              builItems(fs.formItems)\n            #>]),\n            <#\n            }\n            break\n          }\n        }\n      }\n\n      builItems(context.formItems)#>\n    ];\n    if(!me.customSearch) {\n      items.splice(1,0, {\n        xtype:'fieldset',\n        layout:         'column',\n        collapsible:    true,\n        collapsed:      true,\n        title:         _t('Search params','SYSTEM', 'labels'),\n        defaults: {\n          margin: '0 5 5 5',\n          columnWidth: 1,\n          xtype: 'textfield',\n        },\n        items: [{\n          name: 'ensure',\n          fieldLabel: _t('Ensure it exists','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },{\n          name: 'absent',\n          fieldLabel: _t('Ensure it absent','SYSTEM', 'labels'),\n          columnWidth: 0.5,\n          xtype: 'checkbox',\n          hidden: this.property.root,\n        },\n        {\n          name: 'json',\n          xtype: 'textareafield',\n          extraSearchOption:true,\n          optionName: \"json\",\n          propertyName: 'root',\n          rows: 3,\n          grow: true,\n          labelWidth: 0,\n        }]\n      })\n    }\n    Ext.apply(this,{\n      items,\n      listeners: {\n        render: function(form) {\n          DirectCacheLogger.userStories('Search Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, customSearch: this.customSearch });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Search Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        },\n        reset: function(form) {\n          DirectCacheLogger.userStories('Search Form Reset', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"}]}}