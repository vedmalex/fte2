{"version":3,"sources":["generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"],"names":["code","text","expression"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IACCA;AADD,IACCA,AACAA;AAFD,IAECA,AACAA;AAHD,IAGCA,AACAA;AAJD,IAICA,AACAA;AALD,IAKCA,AACAA;AAND,IAMCA,AACAA;AAPD,IAOCA,AAAEC,IACFA,IACAA,+BAA6BC,mBAAoBD,sBAAoBC,eAAgBD,QACrFA,kBAAgBC,yBAA0BD,MAC1CA,kBAAgBC,kBAAmBD,MACnCA,+CACAA,mBAAiBC,qBAAsBD,cACvCA,qCACAA,kCAAgCC,oBAAqBD,GAACC,eAAgBD,IAAED;AAfzE,IAeyEA,AAAwBC,OAAIC,iBAAkBD,IAACD;AAfxH,IAewHA,AAAKC,MAC5HA,cACID;AAjBL,IAiBKA,AAA6DC,IACjEA,SACAA,6BACAA,kCACAA,8BACAA,mCACAA,mCACAA,OACID;AAzBL,IAyBKA,AAAOC,IACXA,UACAA,gCACAA,sBACAA,kDAAgDC,mBAAoBD,YAAUC,eAAgBD,8BAC9FA,IACAA,wBACAA,qFACAA,2BACAA,4BACAA,cACMD;AApCP,IAoCOA,AAA0CC,IAChDA,gBACAA,mCACAA,kBACAA,8BACAA,6DACAA,2CACAA,UACMD;AA5CP,IA4COA,AAAOC,IACbA,uBACAA,sBACAA,wCACAA,6CACAA,oCACAA,kCACAA,cACAA,YACAA,IACAA,oBACAA,aACAA,mCACAA,sBACAA,YACMD;AA3DP,IA2DOA,AACNA;AA5DD,IA4DCA,AACAA;AA7DD,IA6DCA,AACAA;AA9DD,IA8DCA,AACAA;AA/DD,IA+DCA,AAAmGC,IACnGA,yCAAuCC,oBAAqBD,GAACC,eAAgBD,aAAWC,uBAAwBD,IAAEC,cAAeD,OACzHD;AAjET,IAiESA,AACRA;AAlED,IAkECA,AACAA;AAnED,IAmECA,AAAUC,IACVA,YACAA,IACAA,sBACAA,wDACAA,kGAAgGC,oBAAqBD,GAACC,eAAgBD,yDACtIA,cACAA,2EACAA,mGAAiGC,oBAAqBD,GAACC,eAAgBD,kEACvIA,cACAA,wEACAA,4FAA0FC,oBAAqBD,GAACC,eAAgBD,kEAChIA,aACAA,WACAA,WACAA,mCACAA,OACAA;AApFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","file":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":48,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":49,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":50,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":51,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":52,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":53,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":54,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":55,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":56,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":57,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":58,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":59,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":60,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":61,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":62,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":63,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":64,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":65,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":66,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":67,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":68,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":69,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":70,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":71,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":72,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":73,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":74,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":75,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":76,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":77,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":78,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":79,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":80,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":81,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":82,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":83,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":84,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":85,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":86,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":87,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":88,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":89,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":90,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":91,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":92,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":93,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":94,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":95,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":96,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":97,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":98,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":99,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":100,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":101,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":102,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":103,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":104,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":105,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":106,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":107,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":108,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":109,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":110,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":111,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js"},{"generatedLine":8,"generatedColumn":4,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":9,"generatedColumn":4,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":9,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":10,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":10,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":4,"originalLine":6,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":4,"originalLine":6,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":4,"originalLine":7,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":4,"originalLine":7,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":4,"originalLine":8,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":4,"originalLine":8,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":4,"originalLine":8,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":8,"originalLine":9,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":12,"originalLine":10,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":43,"originalLine":10,"originalColumn":30,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":62,"originalLine":10,"originalColumn":50,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":84,"originalLine":10,"originalColumn":70,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":99,"originalLine":10,"originalColumn":86,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":107,"originalLine":11,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":125,"originalLine":11,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":150,"originalLine":11,"originalColumn":43,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":156,"originalLine":12,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":174,"originalLine":12,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":192,"originalLine":12,"originalColumn":36,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":198,"originalLine":13,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":245,"originalLine":14,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":264,"originalLine":14,"originalColumn":18,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":285,"originalLine":14,"originalColumn":40,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":299,"originalLine":15,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":336,"originalLine":16,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":370,"originalLine":16,"originalColumn":33,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":390,"originalLine":16,"originalColumn":54,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":393,"originalLine":16,"originalColumn":55,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":408,"originalLine":16,"originalColumn":71,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":412,"originalLine":16,"originalColumn":73,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":16,"generatedColumn":4,"originalLine":16,"originalColumn":73,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":16,"generatedColumn":4,"originalLine":16,"originalColumn":97,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":16,"generatedColumn":11,"originalLine":16,"originalColumn":101,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":16,"generatedColumn":28,"originalLine":16,"originalColumn":119,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":16,"generatedColumn":32,"originalLine":16,"originalColumn":120,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":17,"generatedColumn":4,"originalLine":16,"originalColumn":120,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":17,"generatedColumn":4,"originalLine":16,"originalColumn":125,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":17,"generatedColumn":10,"originalLine":17,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":17,"generatedColumn":24,"originalLine":18,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":18,"generatedColumn":4,"originalLine":18,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":18,"generatedColumn":4,"originalLine":18,"originalColumn":66,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":18,"generatedColumn":8,"originalLine":19,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":18,"generatedColumn":17,"originalLine":20,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":18,"generatedColumn":46,"originalLine":21,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":18,"generatedColumn":80,"originalLine":22,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":18,"generatedColumn":110,"originalLine":23,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":18,"generatedColumn":145,"originalLine":24,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":18,"generatedColumn":180,"originalLine":25,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":18,"generatedColumn":187,"originalLine":26,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":4,"originalLine":26,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":4,"originalLine":26,"originalColumn":12,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":8,"originalLine":27,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":18,"originalLine":28,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":50,"originalLine":29,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":72,"originalLine":30,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":122,"originalLine":30,"originalColumn":49,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":141,"originalLine":30,"originalColumn":69,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":153,"originalLine":30,"originalColumn":79,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":168,"originalLine":30,"originalColumn":95,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":198,"originalLine":31,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":202,"originalLine":32,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":226,"originalLine":33,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":311,"originalLine":34,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":338,"originalLine":35,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":366,"originalLine":36,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":380,"originalLine":37,"originalColumn":7,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":4,"originalLine":37,"originalColumn":7,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":4,"originalLine":37,"originalColumn":49,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":8,"originalLine":38,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":24,"originalLine":39,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":59,"originalLine":40,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":77,"originalLine":41,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":107,"originalLine":42,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":168,"originalLine":43,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":211,"originalLine":44,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":221,"originalLine":45,"originalColumn":7,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4,"originalLine":45,"originalColumn":7,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4,"originalLine":45,"originalColumn":14,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":8,"originalLine":46,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":31,"originalLine":47,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":53,"originalLine":48,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":93,"originalLine":49,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":138,"originalLine":50,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":174,"originalLine":51,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":208,"originalLine":52,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":222,"originalLine":53,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":234,"originalLine":54,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":238,"originalLine":55,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":258,"originalLine":56,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":271,"originalLine":57,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":306,"originalLine":58,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":328,"originalLine":59,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":340,"originalLine":60,"originalColumn":7,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":22,"generatedColumn":4,"originalLine":60,"originalColumn":7,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":22,"generatedColumn":4,"originalLine":61,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":23,"generatedColumn":4,"originalLine":61,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":23,"generatedColumn":4,"originalLine":62,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":24,"generatedColumn":4,"originalLine":62,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":24,"generatedColumn":4,"originalLine":63,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":25,"generatedColumn":4,"originalLine":63,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":25,"generatedColumn":4,"originalLine":64,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":26,"generatedColumn":4,"originalLine":64,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":26,"generatedColumn":4,"originalLine":64,"originalColumn":100,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":26,"generatedColumn":8,"originalLine":65,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":26,"generatedColumn":49,"originalLine":65,"originalColumn":40,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":26,"generatedColumn":69,"originalLine":65,"originalColumn":61,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":26,"generatedColumn":72,"originalLine":65,"originalColumn":62,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":26,"generatedColumn":87,"originalLine":65,"originalColumn":78,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":26,"generatedColumn":100,"originalLine":65,"originalColumn":89,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":26,"generatedColumn":123,"originalLine":65,"originalColumn":113,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":26,"generatedColumn":127,"originalLine":65,"originalColumn":115,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":26,"generatedColumn":141,"originalLine":65,"originalColumn":130,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":26,"generatedColumn":148,"originalLine":66,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":27,"generatedColumn":4,"originalLine":66,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":27,"generatedColumn":4,"originalLine":67,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":28,"generatedColumn":4,"originalLine":67,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":28,"generatedColumn":4,"originalLine":68,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":4,"originalLine":68,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":4,"originalLine":68,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":8,"originalLine":69,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":20,"originalLine":70,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":24,"originalLine":71,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":46,"originalLine":72,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":102,"originalLine":73,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":200,"originalLine":73,"originalColumn":97,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":220,"originalLine":73,"originalColumn":118,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":223,"originalLine":73,"originalColumn":119,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":238,"originalLine":73,"originalColumn":135,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":295,"originalLine":74,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":309,"originalLine":75,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":384,"originalLine":76,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":483,"originalLine":76,"originalColumn":98,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":503,"originalLine":76,"originalColumn":119,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":506,"originalLine":76,"originalColumn":120,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":521,"originalLine":76,"originalColumn":136,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":587,"originalLine":77,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":601,"originalLine":78,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":673,"originalLine":79,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":765,"originalLine":79,"originalColumn":91,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":785,"originalLine":79,"originalColumn":112,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":788,"originalLine":79,"originalColumn":113,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":803,"originalLine":79,"originalColumn":129,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":869,"originalLine":80,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":882,"originalLine":81,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":893,"originalLine":82,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":904,"originalLine":83,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":939,"originalLine":84,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":29,"generatedColumn":946,"originalLine":85,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryElements.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n#>\n\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryElements.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}elements',\n  itemId: \"DictionaryElements\",\n  //iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  plugins: [\n    <#- if(config.filterForDicElements && hasDictionaryFields){#>\n    {\n      ptype: 'filterbar',\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true,\n    }\n    <#- }#>\n    ],\n  initComponent: function(){\n    let me = this;\n    const store = Ext.create('Modeleditor.store.#{context.namespace}.Selected.#{context.$name}',{filters: this.filters})\n\n    Ext.apply(this,{\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      store,\n      <#-  if(config.pageSizeEmbedded !== -1){#>\n      bbar:{\n        xtype: 'pagingtoolbar',\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: 'No data to display',\n      },\n      <#- }#>\n      viewConfig: {\n        plugins: {\n          ptype: 'gridviewdragdrop',\n          pluginId: \"gridviewdragdrop\",\n          dragGroup: 'elements',\n          dropGroup: 'catalog'\n        },\n      },\n\n      columns: [\n        {\n          xtype: 'rownumberer',\n          width:40\n        },\n      <#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n        <#- }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Elements Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Elements Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"}]}}