{"version":3,"sources":["generators/server/Meta.Query/meta.query.njs.js"],"names":["text","expression","code"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAICA,2EACAA,IACAA,mEACAA,6EACAA,IACAC,0BAA2BD,IAC3BA,IACAC,8BAA+BD,IAC/BE;AAZD,IAYCA,AAAuDF,IACvDA,IACAA,MAAIC,MAAOD,wBAAsBC,MAAOD,aAAWC,MAAOD,qCAC1DA,oEACAA,uCACAE;AAjBD,IAiBCA,AAA2DF,IAC3DA,0DACAE;AAnBD,IAmBCA,AAAaF,IACbA,8BACAE;AArBD,IAqBCA,AAAMF,IACNA,WACAA;AAvBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","file":"generators/server/Meta.Query/meta.query.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":48,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":49,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.njs.js"},{"generatedLine":8,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":8,"generatedColumn":79,"originalLine":6,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":8,"generatedColumn":83,"originalLine":7,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":8,"generatedColumn":150,"originalLine":8,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":8,"generatedColumn":227,"originalLine":9,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":8,"generatedColumn":231,"originalLine":10,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"expression","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":8,"generatedColumn":257,"originalLine":10,"originalColumn":28,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":8,"generatedColumn":261,"originalLine":11,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":8,"generatedColumn":265,"originalLine":12,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"expression","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":8,"generatedColumn":295,"originalLine":12,"originalColumn":32,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":8,"generatedColumn":299,"originalLine":13,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"code","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":9,"generatedColumn":4,"originalLine":13,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"code","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":9,"generatedColumn":4,"originalLine":13,"originalColumn":56,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":9,"generatedColumn":8,"originalLine":14,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":9,"generatedColumn":12,"originalLine":15,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":9,"generatedColumn":18,"originalLine":15,"originalColumn":5,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"expression","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":9,"generatedColumn":24,"originalLine":15,"originalColumn":12,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":9,"generatedColumn":48,"originalLine":15,"originalColumn":34,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"expression","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":9,"generatedColumn":54,"originalLine":15,"originalColumn":41,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":9,"generatedColumn":67,"originalLine":15,"originalColumn":52,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"expression","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":9,"generatedColumn":73,"originalLine":15,"originalColumn":59,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":9,"generatedColumn":110,"originalLine":16,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":9,"generatedColumn":178,"originalLine":17,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":9,"generatedColumn":217,"originalLine":18,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"code","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":10,"generatedColumn":4,"originalLine":18,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"code","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":10,"generatedColumn":4,"originalLine":18,"originalColumn":60,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":10,"generatedColumn":8,"originalLine":19,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":10,"generatedColumn":66,"originalLine":20,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"code","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":11,"generatedColumn":4,"originalLine":20,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"code","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":11,"generatedColumn":4,"originalLine":20,"originalColumn":14,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":11,"generatedColumn":8,"originalLine":21,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":11,"generatedColumn":38,"originalLine":22,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"code","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":12,"generatedColumn":4,"originalLine":22,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"code","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":12,"generatedColumn":4,"originalLine":22,"originalColumn":7,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":12,"generatedColumn":8,"originalLine":23,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"},{"generatedLine":12,"generatedColumn":19,"originalLine":24,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Meta.Query/query.query.njs','query') #>\n<#@ requireAs('server/Meta.Query/query.extractor.njs','extractor') #>\n\nif (typeof(global.CustomQuery) == 'undefined') global.CustomQuery = {};\n\nlet ComplexQuery  = require(\"@grainjs/loaders\").ComplexQuery;\nlet extractor    = require(global.USEGLOBAL('/lib/extractor')).extractor;\n\n#{partial(context,\"query\")}\n\n#{partial(context,\"extractor\")}\n<# const [namespace, name] = context.name.split('.');#>\n\nlet #{name} = global.CustomQuery.#{name} = exports.#{name} = function (db, prm, callback) {\n    ComplexQuery.execQuery(db, query(prm), function(err, data) {\n        if(err) return callback(err);\n<#-if(context.extractor && context.extractor.length > 0){#>\n        extractData.call(this, db, prm, data, callback);\n<#-} else {#>\n        callback(err, data);\n<#-}#>\n    });\n};\n"}]}}