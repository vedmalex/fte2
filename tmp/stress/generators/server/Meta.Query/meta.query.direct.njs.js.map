{"version":3,"sources":["generators/server/Meta.Query/meta.query.direct.njs.js"],"names":["text","code","expression"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAiBA,IAChBC;AADD,IACCA,AAAuDD,IACvDA,kBACAA,gBAAcE,WAAYF,MAC1BA,WAASE,MAAOF,MAChBA,mBAAgBE,sBAAuBF,OACvCA,4BACAA,2BACAA,oCACAA,8BACAA,MAAIC;AAVL,IAUKA,AACJA;AAXD,IAWCA,AACAA;AAZD,IAYCA,AACAA;AAbD,IAaCA,AACAA;AAdD,IAcCA,AACAA;AAfD,IAeCA,AAAqDD,IACrDA,MAAIC;AAhBL,IAgBKA,AAAyBD,IAC7BA,SAAOE,2BAA4BF,MACnCA,MAAIC;AAlBL,IAkBKA,AAAMD,IACVA,mBAAiBE,MAAOF,qDACxBA,0CACAA,oCACAA,UACAA,MAAIC;AAvBL,IAuBKA,AAAwBD,IAC5BA,gBACAA,wBAAsBE,+FAAgGF,KACtHA,SACAA,MAAIC;AA3BL,IA2BKA,AAAMD,IACVA,OACAA;AA7BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","file":"generators/server/Meta.Query/meta.query.direct.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":48,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":49,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":50,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":51,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":52,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":53,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":54,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":55,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":56,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":57,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Query/meta.query.direct.njs.js"},{"generatedLine":8,"generatedColumn":4,"originalLine":1,"originalColumn":17,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":8,"generatedColumn":8,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"code","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":9,"generatedColumn":4,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"code","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":9,"generatedColumn":4,"originalLine":2,"originalColumn":56,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":9,"generatedColumn":8,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":9,"generatedColumn":26,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":9,"generatedColumn":42,"originalLine":4,"originalColumn":15,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"expression","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":9,"generatedColumn":53,"originalLine":4,"originalColumn":27,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":9,"generatedColumn":59,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":9,"generatedColumn":70,"originalLine":5,"originalColumn":10,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"expression","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":9,"generatedColumn":76,"originalLine":5,"originalColumn":17,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":9,"generatedColumn":82,"originalLine":6,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":9,"generatedColumn":101,"originalLine":6,"originalColumn":17,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"expression","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":9,"generatedColumn":123,"originalLine":6,"originalColumn":40,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":9,"generatedColumn":130,"originalLine":7,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":9,"generatedColumn":158,"originalLine":8,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":9,"generatedColumn":185,"originalLine":9,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":9,"generatedColumn":221,"originalLine":10,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":9,"generatedColumn":251,"originalLine":11,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":9,"generatedColumn":257,"originalLine":11,"originalColumn":5,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"code","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":10,"generatedColumn":4,"originalLine":11,"originalColumn":5,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"code","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":10,"generatedColumn":4,"originalLine":12,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"code","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":11,"generatedColumn":4,"originalLine":12,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"code","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":11,"generatedColumn":4,"originalLine":13,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"code","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":12,"generatedColumn":4,"originalLine":13,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"code","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":12,"generatedColumn":4,"originalLine":14,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"code","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":13,"generatedColumn":4,"originalLine":14,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"code","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":13,"generatedColumn":4,"originalLine":15,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"code","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":14,"generatedColumn":4,"originalLine":15,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"code","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":14,"generatedColumn":4,"originalLine":16,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"code","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":15,"generatedColumn":4,"originalLine":16,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"code","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":15,"generatedColumn":4,"originalLine":16,"originalColumn":54,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":15,"generatedColumn":8,"originalLine":17,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":15,"generatedColumn":14,"originalLine":17,"originalColumn":5,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"code","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":16,"generatedColumn":4,"originalLine":17,"originalColumn":5,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"code","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":16,"generatedColumn":4,"originalLine":17,"originalColumn":30,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":16,"generatedColumn":8,"originalLine":18,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":16,"generatedColumn":17,"originalLine":18,"originalColumn":8,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"expression","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":16,"generatedColumn":44,"originalLine":18,"originalColumn":36,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":16,"generatedColumn":50,"originalLine":19,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":16,"generatedColumn":56,"originalLine":19,"originalColumn":5,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"code","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":17,"generatedColumn":4,"originalLine":19,"originalColumn":5,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"code","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":17,"generatedColumn":4,"originalLine":19,"originalColumn":11,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":17,"generatedColumn":8,"originalLine":20,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":17,"generatedColumn":27,"originalLine":20,"originalColumn":18,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"expression","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":17,"generatedColumn":33,"originalLine":20,"originalColumn":25,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":17,"generatedColumn":86,"originalLine":21,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":17,"generatedColumn":128,"originalLine":22,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":17,"generatedColumn":164,"originalLine":23,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":17,"generatedColumn":174,"originalLine":24,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":17,"generatedColumn":180,"originalLine":24,"originalColumn":5,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"code","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":18,"generatedColumn":4,"originalLine":24,"originalColumn":5,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"code","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":18,"generatedColumn":4,"originalLine":24,"originalColumn":29,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":18,"generatedColumn":8,"originalLine":25,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":18,"generatedColumn":24,"originalLine":26,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":18,"generatedColumn":48,"originalLine":26,"originalColumn":23,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"expression","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":18,"generatedColumn":143,"originalLine":26,"originalColumn":119,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":18,"generatedColumn":148,"originalLine":27,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":18,"generatedColumn":157,"originalLine":28,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":18,"generatedColumn":163,"originalLine":28,"originalColumn":5,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"code","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":19,"generatedColumn":4,"originalLine":28,"originalColumn":5,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"code","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":19,"generatedColumn":4,"originalLine":28,"originalColumn":11,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":19,"generatedColumn":8,"originalLine":29,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"},{"generatedLine":19,"generatedColumn":15,"originalLine":30,"originalColumn":1,"source":"generators/server/Meta.Query/meta.query.direct.njs.js","name":"text","content":"<#@ noContent #>\n<# const [namespace, name] = context.name.split('.');#>\nExt.directFn({\n  namespace: '#{namespace}',\n  name: '#{name}',\n  locationType:\"#{context.locationType}\",\n  body: function(para) {\n    let context = this;\n    let prm = para.data.shift();\n    prm.context = context;\n    <#-\n      const hasCondition = context.queryRunCondition !== 'true'\n        && context.queryRunCondition != true\n        && context.queryRunCondition != ''\n        && context.queryRunCondition !== null\n        && context.queryRunCondition !== undefined #>\n    <#- if(hasCondition ){ #>\n    if(#{context.queryRunCondition}){\n    <#-}#>\n    CustomQuery['#{name}'].call(this, this.db, prm, function(err, data) {\n      if (!err) context.success(data);\n      else context.failure(err);\n    })\n    <#- if(hasCondition){ #>\n    } else {\n      context.success(#{context.queryEmptyResult ? context.queryEmptyResult : context.queryIsListResult ? [] : 'null'})\n    }\n    <#-}#>\n  }\n});"}]}}