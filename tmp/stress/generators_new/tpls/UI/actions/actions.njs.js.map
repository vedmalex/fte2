{"version":3,"sources":["generators_new/tpls/UI/actions/actions.njs.js"],"names":["text","code","expression"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAECA,6CACAA,uCACAA,0CACAA,yCACAA,IACAA,IACAC;AARD,IAQCA,AAAqCD,IACrCA,KAAGE,aAAcF,IACjBA,KAAGE,mBAAoBF,IACvBA,KAAGE,mBAAoBF,IACvBA,IACAA,eAAaE,mBAAoBF,MAAIE,mBAAoBF,MACzDA,eAAaE,0BAA2BF,mBACxCA,UAAQE,mBAAoBF,KAC5BA,gCAA8BE,aAAcF,QAC5CA,0BACAA,yCAAuCE,0BAA2BF,QAClEA,OACAA,IACAA,OACAA,wDACAA,oBAAkBE,0BAA2BF,qBAC7CA,SACAA,QACAA,MACAA,IACAA,QAAME,iBAAkBF,+BACxBA,2BACAA,cAAYE,0BAA2BF,4BACvCA,MAAIE,0BAA2BF,aAC/BA,OACAA,eACAA,kEAA+DE,aAAcF,WAASE,aAAcF,UACpGA,OACAA,KACAA,IACAE,iBAAkBF,wBAClBA,IAAEE,0BAA2BF,gCAC7BA,+BACAA,MACAA,IACAA,eAAaE,iBAAkBF,4BAC/BA,IAAEE,0BAA2BF,KAC7BA,KAAGE,iBAAkBF,YACrBA,IACAC;AA/CD,IA+CCA;AA/CD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","file":"generators_new/tpls/UI/actions/actions.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":48,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":49,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":50,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":51,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":52,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":53,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":54,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":55,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":56,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":57,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":58,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":59,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":60,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":61,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":62,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":63,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":64,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":65,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":66,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":67,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":68,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":69,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/actions/actions.njs.js"},{"generatedLine":12,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":12,"generatedColumn":49,"originalLine":4,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":12,"generatedColumn":88,"originalLine":5,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":12,"generatedColumn":130,"originalLine":6,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":12,"generatedColumn":171,"originalLine":7,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":12,"generatedColumn":175,"originalLine":8,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":12,"generatedColumn":179,"originalLine":9,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":4,"originalLine":9,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":4,"originalLine":9,"originalColumn":38,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":8,"originalLine":10,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":13,"originalLine":10,"originalColumn":4,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":26,"originalLine":10,"originalColumn":18,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":30,"originalLine":11,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":35,"originalLine":11,"originalColumn":4,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":54,"originalLine":11,"originalColumn":24,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":58,"originalLine":12,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":63,"originalLine":12,"originalColumn":4,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":82,"originalLine":12,"originalColumn":24,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":86,"originalLine":13,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":90,"originalLine":14,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":105,"originalLine":14,"originalColumn":14,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":124,"originalLine":14,"originalColumn":34,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":130,"originalLine":14,"originalColumn":38,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":149,"originalLine":14,"originalColumn":58,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":155,"originalLine":15,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":170,"originalLine":15,"originalColumn":14,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":196,"originalLine":15,"originalColumn":41,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":215,"originalLine":16,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":225,"originalLine":16,"originalColumn":9,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":244,"originalLine":16,"originalColumn":29,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":249,"originalLine":17,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":281,"originalLine":17,"originalColumn":31,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":294,"originalLine":17,"originalColumn":45,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":302,"originalLine":18,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":328,"originalLine":19,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":369,"originalLine":19,"originalColumn":40,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":395,"originalLine":19,"originalColumn":67,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":403,"originalLine":20,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":410,"originalLine":21,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":414,"originalLine":22,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":421,"originalLine":23,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":477,"originalLine":24,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":497,"originalLine":24,"originalColumn":19,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":523,"originalLine":24,"originalColumn":46,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":544,"originalLine":25,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":553,"originalLine":26,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":561,"originalLine":27,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":567,"originalLine":28,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":571,"originalLine":29,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":579,"originalLine":29,"originalColumn":7,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":596,"originalLine":29,"originalColumn":25,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":627,"originalLine":30,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":654,"originalLine":31,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":668,"originalLine":31,"originalColumn":13,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":694,"originalLine":31,"originalColumn":40,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":722,"originalLine":32,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":728,"originalLine":32,"originalColumn":5,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":754,"originalLine":32,"originalColumn":32,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":767,"originalLine":33,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":774,"originalLine":34,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":789,"originalLine":35,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":855,"originalLine":35,"originalColumn":64,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":868,"originalLine":35,"originalColumn":78,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":879,"originalLine":35,"originalColumn":87,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":892,"originalLine":35,"originalColumn":101,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":902,"originalLine":36,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":909,"originalLine":37,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":914,"originalLine":38,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":918,"originalLine":39,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":935,"originalLine":39,"originalColumn":19,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":959,"originalLine":40,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":963,"originalLine":40,"originalColumn":3,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":989,"originalLine":40,"originalColumn":30,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":1021,"originalLine":41,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":1052,"originalLine":42,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":1058,"originalLine":43,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":1062,"originalLine":44,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":1077,"originalLine":44,"originalColumn":14,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":1094,"originalLine":44,"originalColumn":32,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":1122,"originalLine":45,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":1126,"originalLine":45,"originalColumn":3,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":1152,"originalLine":45,"originalColumn":30,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":1157,"originalLine":46,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":1162,"originalLine":46,"originalColumn":4,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":1179,"originalLine":46,"originalColumn":22,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":1191,"originalLine":47,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":13,"generatedColumn":1195,"originalLine":48,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"},{"generatedLine":14,"generatedColumn":4,"originalLine":48,"originalColumn":1,"source":"generators_new/tpls/UI/actions/actions.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'actions' -#>\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\n\n\n<# entity.actions.forEach(action=>{#>\n// #{action.name}\n// #{action.actionType}\n// #{action.actionName}\n\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.name}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n*  // define this method in dataProvider to use this\n*  async function #{action.actionCreatorName}(data, resource){\n*    \n*  }\n*/\n\nclass #{action.fullName}Action  extends Component {\n  handleClick = () => {\n    const { #{action.actionCreatorName}, record } = this.props;\n    #{action.actionCreatorName}(record);\n  }\n  render(){\n    return(<Button onClick={this.handleClick} label=\"resources.#{entity.name}.actions.#{action.name}\"/>);\n  }\n}\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n\n<#})#>"}]}}