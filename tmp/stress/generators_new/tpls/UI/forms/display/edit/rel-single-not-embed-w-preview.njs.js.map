{"version":3,"sources":["generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"],"names":["text","code","expression"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAsBA,IACsCA,IAC3DC;AAFD,IAECA,AACAA;AAHD,IAGCA,AACAA;AAJD,IAICA,AAAGD,IACHA,yBACAA,sBAAmBE,gCAAiCF,UAAQE,QAASF,MACrEA,aAAWE,QAASA,iBAAkBF,MACtCA,gBAAaE,6CAA8CF,MAC3DA,aAAUE,cAAeF,MACzBA,qBACAC;AAXD,IAWCA,AAAgBD,IAChBA,2BAAwBE,gCAAiCF,WAASE,QAASF,MAC3EC;AAbD,IAaCA,AAAaD,IACbA,wBACAC;AAfD,IAeCA,AAAKD,IACLC;AAhBD,IAgBCA,AAAuBD,IACvBA,YAAUE,6CAA8CF,KACxDA,cACAA,IAAEC;AAnBH,IAmBGA,AAA6BD,IAC/BA,6BACAA,IAAEC;AArBH,IAqBGA,AAAaD,IACfA,uBACAA,IAAEC;AAvBH,IAuBGA,AAAOD,IACTA,OACAA,IAAEC;AAzBH,IAyBGA,AAAuBD,IACzBA,cAAYC;AA1Bb,IA0BaA,AAAaD,IACzBA,6BAA2BC;AA3B5B,IA2B4BA,AAAKD,IAChCA,kBACAA,IAAEC;AA7BH,IA6BGA,AAA6BD,IAC/BA,UAAQE,cAAeF,cACvBA,IAAEC;AA/BH,IA+BGA,AAAaD,IACfA,WAASE,cAAeF,mBACxBA,IAAEC;AAjCH,IAiCGA,AAAOD,IACTA,OACAA,OACAA,iCAA8BE,4CAA6CF,OAC3EA,IAAEC;AArCH,IAqCGA,AACFA;AAtCD,IAsCCA,AACAA;AAvCD,IAuCCA,AACAA;AAxCD,IAwCCA,AACAA;AAzCD,IAyCCA,AACAA;AA1CD,IA0CCA,AACAA;AA3CD,IA2CCA,AACAA;AA5CD,IA4CCA,AACAA;AA7CD,IA6CCA,AACAA;AA9CD,IA8CCA,AACAA;AA/CD,IA+CCA,AAAID,IACJA,MAAIE,yCAA0CF,IAC9CA,yBACAA;AAlDD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","file":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":48,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":49,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":50,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":51,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":52,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":53,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":54,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":55,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":56,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":57,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":58,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":59,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":60,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":61,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":62,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":63,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":64,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":65,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":66,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":67,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":68,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":69,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":70,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":71,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":72,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":73,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":74,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":75,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":76,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":77,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":78,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":79,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":80,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":81,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":82,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":83,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":84,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":85,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":86,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":87,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":88,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":89,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":90,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":91,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":92,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":93,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":94,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":95,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":96,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":97,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js"},{"generatedLine":12,"generatedColumn":4,"originalLine":1,"originalColumn":22,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":12,"generatedColumn":8,"originalLine":2,"originalColumn":60,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":12,"generatedColumn":12,"originalLine":3,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":13,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":13,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":14,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":14,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":15,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":15,"generatedColumn":4,"originalLine":5,"originalColumn":4,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":15,"generatedColumn":8,"originalLine":6,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":15,"generatedColumn":33,"originalLine":7,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":15,"generatedColumn":55,"originalLine":7,"originalColumn":20,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"expression","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":15,"generatedColumn":87,"originalLine":7,"originalColumn":53,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":15,"generatedColumn":97,"originalLine":7,"originalColumn":61,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"expression","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":15,"generatedColumn":105,"originalLine":7,"originalColumn":70,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":15,"generatedColumn":111,"originalLine":8,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":15,"generatedColumn":124,"originalLine":8,"originalColumn":12,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"expression","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":15,"generatedColumn":132,"originalLine":8,"originalColumn":21,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"expression","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":15,"generatedColumn":149,"originalLine":8,"originalColumn":39,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":15,"generatedColumn":155,"originalLine":9,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":15,"generatedColumn":171,"originalLine":9,"originalColumn":14,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"expression","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":15,"generatedColumn":216,"originalLine":9,"originalColumn":60,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":15,"generatedColumn":222,"originalLine":10,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":15,"generatedColumn":235,"originalLine":10,"originalColumn":11,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"expression","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":15,"generatedColumn":249,"originalLine":10,"originalColumn":26,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":15,"generatedColumn":255,"originalLine":11,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":15,"generatedColumn":276,"originalLine":12,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":16,"generatedColumn":4,"originalLine":12,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":16,"generatedColumn":4,"originalLine":12,"originalColumn":17,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":16,"generatedColumn":8,"originalLine":13,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":16,"generatedColumn":35,"originalLine":13,"originalColumn":25,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"expression","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":16,"generatedColumn":67,"originalLine":13,"originalColumn":58,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":16,"generatedColumn":78,"originalLine":13,"originalColumn":67,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"expression","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":16,"generatedColumn":86,"originalLine":13,"originalColumn":76,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":16,"generatedColumn":92,"originalLine":14,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":17,"generatedColumn":4,"originalLine":14,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":17,"generatedColumn":4,"originalLine":14,"originalColumn":14,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":17,"generatedColumn":8,"originalLine":15,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":17,"generatedColumn":32,"originalLine":16,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":18,"generatedColumn":4,"originalLine":16,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":18,"generatedColumn":4,"originalLine":16,"originalColumn":6,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":18,"generatedColumn":8,"originalLine":17,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":19,"generatedColumn":4,"originalLine":17,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":19,"generatedColumn":4,"originalLine":17,"originalColumn":24,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":19,"generatedColumn":8,"originalLine":18,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":19,"generatedColumn":20,"originalLine":18,"originalColumn":11,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"expression","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":19,"generatedColumn":65,"originalLine":18,"originalColumn":57,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":19,"generatedColumn":70,"originalLine":19,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":19,"generatedColumn":84,"originalLine":20,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":19,"generatedColumn":88,"originalLine":20,"originalColumn":3,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":20,"generatedColumn":4,"originalLine":20,"originalColumn":3,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":20,"generatedColumn":4,"originalLine":20,"originalColumn":32,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":20,"generatedColumn":8,"originalLine":21,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":20,"generatedColumn":37,"originalLine":22,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":20,"generatedColumn":41,"originalLine":22,"originalColumn":3,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":21,"generatedColumn":4,"originalLine":22,"originalColumn":3,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":21,"generatedColumn":4,"originalLine":22,"originalColumn":16,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":21,"generatedColumn":8,"originalLine":23,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":21,"generatedColumn":31,"originalLine":24,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":21,"generatedColumn":35,"originalLine":24,"originalColumn":3,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":22,"generatedColumn":4,"originalLine":24,"originalColumn":3,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":22,"generatedColumn":4,"originalLine":24,"originalColumn":10,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":22,"generatedColumn":8,"originalLine":25,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":22,"generatedColumn":15,"originalLine":26,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":22,"generatedColumn":19,"originalLine":26,"originalColumn":3,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":23,"generatedColumn":4,"originalLine":26,"originalColumn":3,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":23,"generatedColumn":4,"originalLine":26,"originalColumn":26,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":23,"generatedColumn":8,"originalLine":27,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":23,"generatedColumn":22,"originalLine":27,"originalColumn":13,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":24,"generatedColumn":4,"originalLine":27,"originalColumn":13,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":24,"generatedColumn":4,"originalLine":27,"originalColumn":26,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":24,"generatedColumn":8,"originalLine":28,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":24,"generatedColumn":37,"originalLine":28,"originalColumn":28,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":25,"generatedColumn":4,"originalLine":28,"originalColumn":28,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":25,"generatedColumn":4,"originalLine":28,"originalColumn":33,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":25,"generatedColumn":8,"originalLine":29,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":25,"generatedColumn":26,"originalLine":30,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":25,"generatedColumn":30,"originalLine":30,"originalColumn":3,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":26,"generatedColumn":4,"originalLine":30,"originalColumn":3,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":26,"generatedColumn":4,"originalLine":30,"originalColumn":32,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":26,"generatedColumn":8,"originalLine":31,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":26,"generatedColumn":18,"originalLine":31,"originalColumn":9,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"expression","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":26,"generatedColumn":32,"originalLine":31,"originalColumn":24,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":26,"generatedColumn":46,"originalLine":32,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":26,"generatedColumn":50,"originalLine":32,"originalColumn":3,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":27,"generatedColumn":4,"originalLine":32,"originalColumn":3,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":27,"generatedColumn":4,"originalLine":32,"originalColumn":16,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":27,"generatedColumn":8,"originalLine":33,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":27,"generatedColumn":19,"originalLine":33,"originalColumn":10,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"expression","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":27,"generatedColumn":33,"originalLine":33,"originalColumn":25,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":27,"generatedColumn":52,"originalLine":34,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":27,"generatedColumn":56,"originalLine":34,"originalColumn":3,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":28,"generatedColumn":4,"originalLine":34,"originalColumn":3,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":28,"generatedColumn":4,"originalLine":34,"originalColumn":10,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":28,"generatedColumn":8,"originalLine":35,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":28,"generatedColumn":15,"originalLine":36,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":28,"generatedColumn":22,"originalLine":37,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":28,"generatedColumn":55,"originalLine":37,"originalColumn":31,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"expression","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":28,"generatedColumn":99,"originalLine":37,"originalColumn":76,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":28,"generatedColumn":106,"originalLine":38,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":28,"generatedColumn":110,"originalLine":38,"originalColumn":3,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":29,"generatedColumn":4,"originalLine":38,"originalColumn":3,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":29,"generatedColumn":4,"originalLine":39,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":30,"generatedColumn":4,"originalLine":39,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":30,"generatedColumn":4,"originalLine":40,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":31,"generatedColumn":4,"originalLine":40,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":31,"generatedColumn":4,"originalLine":41,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":32,"generatedColumn":4,"originalLine":41,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":32,"generatedColumn":4,"originalLine":42,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":33,"generatedColumn":4,"originalLine":42,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":33,"generatedColumn":4,"originalLine":43,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":34,"generatedColumn":4,"originalLine":43,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":34,"generatedColumn":4,"originalLine":44,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":35,"generatedColumn":4,"originalLine":44,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":35,"generatedColumn":4,"originalLine":45,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":36,"generatedColumn":4,"originalLine":45,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":36,"generatedColumn":4,"originalLine":46,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":37,"generatedColumn":4,"originalLine":46,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":37,"generatedColumn":4,"originalLine":47,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":38,"generatedColumn":4,"originalLine":47,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":38,"generatedColumn":4,"originalLine":48,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":39,"generatedColumn":4,"originalLine":48,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"code","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":39,"generatedColumn":4,"originalLine":48,"originalColumn":5,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":39,"generatedColumn":8,"originalLine":49,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":39,"generatedColumn":14,"originalLine":49,"originalColumn":5,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"expression","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":39,"generatedColumn":55,"originalLine":49,"originalColumn":47,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":39,"generatedColumn":59,"originalLine":50,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"},{"generatedLine":39,"generatedColumn":84,"originalLine":51,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/rel-single-not-embed-w-preview.njs.js","name":"text","content":"<#@ context \"ctx\" -#>\n<#@ alias 'display-edit-rel-single-not-embed-w-preview' -#>\n<#-\n  const {entity, f, source, sectionLabel, readonly} = ctx;\n-#>\n<uix.InputWithPreview\n  label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\"\n  source={`#{source}#{f.ref.backField}`}\n  reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"\n  entity=\"#{f.ref.entity}\"\n  perPage={10000}\n<#if(f.hint){-#>\n  helperText=\"resources.#{f.inheritedFrom || entity.name}.helpers.#{f.name}\"\n<#} else {-#>\n  helperText={false}\n<#}#>\n<# const empty = '{}'#>\n  filter={#{f.ref.editFilter ? f.ref.editFilter : empty}}\n  Select={\n  <#-if(f.ref.autocomplete){-#>\n    uix.AutocompleteInput\n  <#} else {-#>\n    uix.SelectInput\n  <#-}-#>\n  }\n  <#- if (!f.required){#>\n  allowEmpty<#} else {-#>\n  validate={uix.required()}<#}#>\n  optionText={\n  <#-if(f.ref.autocomplete){-#>\n    uix.#{f.ref.entity}.inputText\n  <#} else {-#>\n    <uix.#{f.ref.entity}.SelectTitle />\n  <#-}-#>\n  }\n  >\n    <uix.SimpleForm resource=\"#{entity.model.entityPathMapper[entity.name]}\">\n  <# const e = entity.model.entities.find(e => e.name === f.ref.entity)\n    const context = {\n      entity: {\n        ...e,\n        props: e.lists.quickCreate\n      },\n      source: '',\n      sectionLabel,\n      readonly,\n    }\n  #>\n    #{partial(context, 'display-edit-entity')}\n    </uix.SimpleForm>\n  </uix.InputWithPreview>"}]}}